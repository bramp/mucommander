<!--
This file is part of muCommander, http://www.mucommander.com
Copyright (C) 2002-2007 Maxence Bernard

muCommander is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

muCommander is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<!-- ========================================================= -->
<!-- Properties and targets common to all muCommander          -->
<!-- subprojects.                                              -->
<!-- ========================================================= -->
<project>
  <!-- = Directory structure ================================= -->
  <!-- ======================================================= -->
  <!-- The following properties describe the global directory  -->
  <!-- structure.                                              -->

  <!-- Directory in which to store distribution files.         -->
  <property name="dist"                value="dist"/>
  <!-- Directory in which to store temporary files.            -->
  <property name="tmp"                 value="tmp"/>
  <!-- Directory in which to store reports.                    -->
  <property name="reports"             value="reports"/>
  <!-- Directory in which to store the documentation.          -->
  <property name="doc"                 location="docs"/>
  <!-- Directory from which to load resources.                 -->
  <property name="res"                 location="res"/>
  <!-- Directory from which to load the various tools used to  -->
  <!-- build the software.                                     -->
  <property name="tools"               location="tools"/>
  <!-- Directory containing the project's sources.             -->
  <property name="source"              location="source"/>
  <!-- Directory containing the project's libraries.           -->
  <property name="lib"                 location="lib"/>



  <!-- = FindBugs management ================================= -->
  <!-- ======================================================= -->
  <!-- The following targets are used to deal with FindBugs,   -->
  <!-- its availability and successful loading.                -->

  <!-- Checks whether FindBugs is available or not.            -->
  <!-- This is a helper target and should not be referenced    -->
  <!-- directly.                                               -->
  <target name="check-findbugs">
    <!-- Checks for FindBugs availability.                     -->
    <!-- If FindBugs is available, the ${findbugs.available}   -->
    <!-- property will be set to true.                         -->
    <condition property="findbugs.available" value="true">
      <available classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${findbugs.home}/lib/findbugs-ant.jar"/>
    </condition>
  </target>  

  <!-- Tries to load FindBugs.                                 -->
  <target name="load-findbugs" depends="check-findbugs" if="findbugs.available">
    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${findbugs.home}/lib/findbugs-ant.jar"/>
  </target>



  <!-- = proGuard management ================================= -->
  <!-- ======================================================= -->
  <!-- The following targets are used to deal with proGuard,   -->
  <!-- its availability and successful loading.                -->

  <!-- Checks whether proGuard is available or not.            -->
  <!-- This is a helper target and should not be referenced    -->
  <!-- directly.                                               -->
  <target name="check-proguard">
    <!-- If the proGuard path is not set, uses default value.  -->
    <property name="proguard.lib" value="${tools}/proguard.jar"/>

    <!-- Checks for proGuard availability.                     -->
    <!-- If proGuard is available, the ${proguard.available}   -->
    <!-- property will be set to true.                         -->
    <condition property="proguard.available" value="true">
      <available classname="proguard.ant.ProGuardTask" classpath="${proguard.lib}"/>
    </condition>
  </target>  

  <!-- Tries to load proGuard.                                 -->
  <target name="load-proguard" depends="check-proguard,check-7za" if="proguard.available">
    <taskdef name="proguard" classname="proguard.ant.ProGuardTask" classpath="${proguard.lib}"/>

    <!-- Use mixed-case obfuscation if:                        -->
    <!-- - 7za is not available (the obfuscated JAR is not     -->
    <!--   extracted).                                         -->
    <!-- - configuration defines the file system as case       -->
    <!--   sensitive.                                          -->
    <condition property="proguard.mixed-case" value="true">
      <or>
        <isfalse value="${7za.available}"/>
        <istrue value="${case-sensitive-fs}"/>
      </or>
    </condition>
  </target>


  <!-- = JUnit loading ======================================= -->
  <!-- ======================================================= -->
  <!-- The JUnit Ant task comes bundled with Ant               -->
  <!-- (ant-junit.jar) but requires the main JUnit package     -->
  <!-- (junit.jar) which unfortunately is not bundled with Ant -->
  <!-- and needs to be manually copied to $ANT_HOME/lib.       -->
  <!-- Furthermore, 'junit.jar' cannot be copied elsewhere and -->
  <!-- loaded separately, as both JAR files need to reside in  -->
  <!-- Ant's boot classpath. More information about this here: -->
  <!-- http://ant.apache.org/manual/OptionalTasks/junit.html . -->
  <!--                                                         -->
  <!-- The JUnit task of Ant 1.7.0 has improved in this        -->
  <!-- department thanks to the <classpath> element. So the    -->
  <!-- day Ant 1.7.0 becomes a minimum requirement, we'll be   -->
  <!-- able to simplify this and use the 'junit.jar' file that -->
  <!-- comes with muCommander.                                 -->

  <!-- Checks if JUnit is available. The result is stored in   -->
  <!-- ${junit.available}.                                     -->
  <!-- If not in release mode (${is-release} set to false),    -->
  <!-- this target will fail the build.                        -->
  <target name="check-junit">
    <condition property="junit.available" value="true">
      <!-- Test both Ant task and one of JUnit package         -->
      <!-- framework classes.                                  -->
      <and>
        <available classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>
        <available classname="junit.framework.Test"/>
      </and>
    </condition>

    <!-- If we're not in release mode and junit is not         -->
    <!-- available, fails the build.                           -->
    <fail>
      JUnit could not be loaded. Verify that ${ant.home}lib/ contains both 'ant-junit.jar' (JUnit Ant task) and 'junit.jar' (JUnit package). The 'junit.jar' package can be found in ${lib}/.
      <condition>
        <and>
          <not>
            <istrue value="${is-release}"/>
          </not>
          <not>
            <istrue value="${junit.available}"/>
          </not>
        </and>
      </condition>
    </fail>
  </target>



  <!-- = 7za management ====================================== -->
  <!-- ======================================================= -->
  <!-- Checks whether 7za is available.                        -->
  <!-- The result will be stored in ${7za.available}.          -->
  <target name="check-7za">
    <condition property="7za.available" value="true">
      <available file="${7za.executable}" type="file"/>
    </condition>
  </target>  



  <!-- = Simian integration (similarity checker) ============= -->
  <!-- ======================================================= -->
  <!-- Checks if Simian is available. The result is stored in  -->
  <!-- ${simian.available}.                                    -->
  <target name="check-simian">
    <!-- If the value is not set, use built-in jar.            -->
    <property name="simian.lib" value="${tools}/simian.jar"/>

    <!-- Checks for Simian availability.                       -->
    <!-- If Simian is available, the ${simian.available}       -->
    <!-- property will be set to true.                         -->
    <condition property="simian.available" value="true">
      <available resource="simiantask.properties" classpath="${simian.lib}"/>
    </condition>
  </target>

  <!-- Loads the Simian task if it's available.                -->
  <target name="load-simian" depends="check-simian" if="simian.available">
    <taskdef resource="simiantask.properties" classpath="${simian.lib}"/>
  </target>



  <!-- = Maintenance ========================================= -->
  <!-- ======================================================= -->
  <!-- Deletes any dynamically generated file, effectively     -->
  <!-- re-initialising the whole project.                      -->
  <target name="clean" unless="clean.done">
    <echo>Deleting temporary files...</echo>
    <property name="clean.done" value="true"/>
    <delete dir="${tmp}"/>
    <delete dir="${dist}"/>
    <delete dir="${doc}"/>
    <delete dir="${reports}"/>
    <echo>Deleting emacs backup files...</echo>
    <delete includeEmptyDirs="true">
      <fileset dir="." includes="**/*~" defaultexcludes="no"/>
    </delete>
  </target>

  <!-- Defines a pattern that matches any non-test Java source -->
  <!-- file.                                                   -->
  <patternset id="non-test-sources">
    <include name="**/*.java"/>
    <exclude name="**/*Test.java"/>
  </patternset>
</project>
