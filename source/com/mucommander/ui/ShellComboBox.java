package com.mucommander.ui;

import javax.swing.*;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import java.awt.*;
import java.awt.event.*;


public class ShellComboBox extends JComboBox implements ActionListener, KeyListener {
    private JTextField input;
    private RunDialog  parent;

    // - History fields -------------------------------------------------------------
    // ------------------------------------------------------------------------------
    private String[]   history;
    private int        historyStart;
    private int        historyEnd;

    /** When true, any action or key events received will be ignored */
    private boolean ignoreEvents = true;    // Events are ignored until location is changed for the first time

    public ShellComboBox(RunDialog parent) {
        this.parent = parent;

        // Initialises history;
        history      = new String[10];
        historyStart = 0;
        historyEnd   = 0;


        // Use a custom text field that can display loading progress when changing folders
        this.input = new JTextField();
        setEditor(new BasicComboBoxEditor() {
                public Component getEditorComponent() {
                    return ShellComboBox.this.input;
                }
            });

        // Make this combo box editable
        setEditable(true);

        // Listen to action events generated by the combo box (popup menu selection)
        addActionListener(this);
        // Listen to key events generated by the text field (enter and escape)
        input.addKeyListener(this);

        // Prevent up/down keys from firing ActionEvents (default behavior is plain stupid)
        // Java 1.3
        putClientProperty("JComboBox.lightweightKeyboardNavigation","Lightweight");
        // Java 1.4 and up
        putClientProperty("JComboBox.isTableCellEditor", Boolean.TRUE);
    }

    private void runCommand(String command) {
        addToHistory(command);
        input.setText(command);
        parent.runCommand(command);
    }

    // - History handling -----------------------------------------------------------
    // ------------------------------------------------------------------------------
    private void addToHistory(String command) {
        history[historyEnd] = command;
        historyEnd++;

        // Wraps around the history buffer.
        if(historyEnd == history.length)
            historyEnd = 0;

        // Clears items from the begining of the buffer if necessary.
        if(historyEnd == historyStart) {
            if(++historyStart == history.length)
                historyStart = 0;
        }

        // Updates the content of the combo box.
        removeAllItems();
        int i = historyEnd;
        while(true) {
            if(--i == -1)
                i = history.length - 1;
            addItem(history[i]);
            if(i == historyStart)
                break;
        }
        
    }


    ////////////////////////
    // Overridden methods //
    ////////////////////////

    /**
     * Overrides this method to ignore events received when this component is disabled.
     */
    public void setEnabled(boolean enabled) {
        super.setEnabled(enabled);
        this.ignoreEvents = !enabled;
        if(enabled) {
            input.setSelectionStart(0);
            input.setSelectionEnd(input.getText().length());
        }
    }

    ////////////////////////////
    // ActionListener methods //
    ////////////////////////////

    public void actionPerformed(ActionEvent e) {
        // Return if events should be ignored
        if(ignoreEvents)
            return;

        Object selectedItem = getSelectedItem();
        // If a folder was selected in the combo popup menu, change current folder to the selected one
        if(selectedItem!=null) {
            // Explicitely hide popup, seems to be necessary under Windows/Java 1.5
            hidePopup();

            // Runs the requested command.
            setEnabled(false);
            runCommand((String)selectedItem);            
        }
    }


    /////////////////////////
    // KeyListener methods //
    /////////////////////////

    public void keyPressed(KeyEvent e) {
        // Return if events should be ignored or if popup is visible (events would pertain to combo popup, not text field)
        if(ignoreEvents || isPopupVisible())
            return;

        if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
        }
        else if(e.getKeyCode()==KeyEvent.VK_ENTER) {
            setEnabled(false);
            runCommand(input.getText());
        }
    }

    public void keyTyped(KeyEvent e) {
    }

    public void keyReleased(KeyEvent e) {
    }

    public String getCommand(boolean add) {
        String command;

        command = input.getText();
        if(add)
            addToHistory(command);

        return command;
    }
}
