<project name="mucommander" default="compileandrun" basedir=".">

  <!-- Set global properties for this build -->
  <property name="source" value="source"/>
  <property name="classes" value="classes"/>
  <property name="dist"  value="dist"/>
  <property name="lib"   value="lib"/>
  <property name="res"	 value="res"/>


  <!-- Prepares compile -->
  <target name="init">
    <!-- Sets time stamp to current time/date -->
    <tstamp/>
    <!-- Create class directory used by compile -->
    <mkdir dir="${classes}"/>
    <!-- Copy images files to {$classes} -->
    <copy todir="${classes}">
      <fileset dir="res">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>


  <!-- Compiles .java files, adding libraries to classpath -->
  <target name="compile" depends="init">
    <!-- Compile the java code from ${source} into ${classes} -->
    <javac srcdir="${source}" destdir="${classes}" debug="on" deprecation="on" encoding="utf-8">
      <classpath>
        <pathelement location="classes"/>
         <fileset dir="lib">
          <include name="**/*.jar"/>
         </fileset>
        <pathelement path="${classpath}"/>
      </classpath>
    </javac>
  </target>


  <!-- Extracts lib JAR libraries files and copies resource files to the classes folder -->
  <target name="prepare">
    <!-- Unjar libraries to include them in the JAR file -->
    <unjar src="${lib}/muxml.jar" dest="${classes}"/>
    <unjar src="${lib}/jcifs.jar" dest="${classes}"/>
    <unjar src="${lib}/commons-net.jar" dest="${classes}"/>
    <unjar src="${lib}/commons-logging.jar" dest="${classes}"/>
    <unjar src="${lib}/jakarta-oro.jar" dest="${classes}"/> 
    <unjar src="${lib}/javatar.jar" dest="${classes}"/>
    <unjar src="${lib}/j2ssh.jar" dest="${classes}"/>
    <!-- Not supported by unjar, too bad
        <fileset dir="${lib}">
        <include name="**/*.jar"/>
    </fileset>                      -->
  </target> 


  <!-- Creates a distribution JAR file, including all resources and needed libraries -->
  <target name="jar" depends="build">
  
    <!-- Create dist subfolder where the JAR file will be put -->
    <mkdir dir="${dist}"/>
    
	<!-- Delete any existing JAR file -->
	<delete file="${dist}/mucommander_unobf.jar"/>

    <!-- Put everything in ${classes} into the ${dist}/mucommander_unobf.jar file -->
    <jar jarfile="${dist}/mucommander_unobf.jar" basedir="${classes}" manifest="${res}/MANIFEST.MF"/>

	<!-- Trigger proguard target -->
	<antcall target="proguard"/>

  </target>


  <!-- Obfuscate code using yGuard to app the app leaner -->
  <target name="yguard">
    <taskdef name="obfuscate" 
        classname="com.yworks.yguard.ObfuscatorTask" 
        classpath="yguard.jar"/>
    <obfuscate mainclass="com.mucommander.Launcher" logfile="${dist}/yguard_log.xml" conservemanifest="true">
	    <property name="naming-scheme" value="small"/>
		<inoutpair in="${dist}/mucommander_unobf.jar" out="${dist}/mucommander.jar"/>
		<!-- Needed for jCIFS -->
		<expose>
			<class name="jcifs.Config"/>
			<class name="com.mucommander.ui.macosx.FinderIntegration"/>
		</expose>
	</obfuscate>
  </target>

  <!-- Obfuscate code using ProGuard to make the app smaller and faster -->
  <target name="proguard">
	<!-- Delete any existing obfuscated JAR file -->
	<delete file="${dist}/mucommander.jar"/>
	<!-- Imports ProGuard obfuscator ant task -->
	<taskdef name="proguard" classname="proguard.ant.ProGuardTask" classpath="proguard.jar"/>
	<proguard overloadaggressively="on" usemixedclassnames="off" ignorewarnings="on" printseeds="on">
		<injar name="${dist}/mucommander_unobf.jar"/> 
		<outjar name="${dist}/mucommander.jar"/>
		<libraryjar name="/System/Library/Frameworks/JavaVM.framework/Versions/1.4.2/Classes/classes.jar"/>
		<!-- Mac OS X specific -->
		<keep name="com.mucommander.ui.macosx.FinderIntegration">
			<method access="public" name="handleAbout"/>
			<method access="public" name="handlePrefs"/>
			<method access="public" name="handleQuit"/>
		</keep>
		<!-- Viewer API uses reflection -->
		<keep name="com.mucommander.file.AbstractFile"/>
		<keepclasseswithmembers extends="com.mucommander.ui.viewer.FileViewer">
			<method access="public static" type="boolean" name="canViewFile" param="com.mucommander.file.AbstractFile"/> 
		</keepclasseswithmembers>
		<!-- Editor API uses reflection -->
		<keepclasseswithmembers extends="com.mucommander.ui.editor.FileEditor">
			<method access="public static" type="boolean" name="canEditFile" param="com.mucommander.file.AbstractFile"/>
		</keepclasseswithmembers>
		<!-- Main class -->
		<keep name="com.mucommander.Launcher">
			<method access="public static" name="main" param="java.lang.String[]"/>
		</keep>
		<!-- jCIFS uses forName -->
		<keep name="jcifs.Config">
			<method access="public" name="*"/>
		</keep>

		<!-- Required by j2ssh library -->
		<keep name="org.apache.commons.logging.*">
                        <method access="public" name="*"/>
                </keep> 
                <keep name="org.apache.commons.logging.impl.LogFactoryImpl">
                        <method access="public" name="*"/>
                </keep>

	</proguard>
  </target>


<!--  <target name="signjar">
     <copy file="${dist}/mucommander.jar" tofile="mucommander.com/webstart/mucommander.jar"/>
     <signjar jar="mucommander.com/webstart/mucommander.jar" keystore="webstart/keystore" alias="maxence"/>
  </target> -->

  <!-- Launches mucommander from the classes directory -->
  <target name="run">
    <java classname="com.mucommander.Launcher" fork="true">
      <classpath>
        <pathelement location="classes"/>
         <fileset dir="lib">
          <include name="**/*.jar"/>
         </fileset>
        <pathelement path="${classpath}"/>
      </classpath>
    </java>
  </target>


   <!-- Launches mucommander from the distribution JAR file -->
  <target name="runjar">
    <java jar="${dist}/mucommander.jar" fork="true"/>
  </target>


  <!-- Clean all compiles files and copied resources, virtually leaving
       the project in the same state as after a CVS checkout --> 
  <target name="clean">
    <!-- Delete the ${classes} and ${dist} directory trees -->
    <delete dir="${classes}"/>
    <delete dir="${dist}"/>
  </target>


  <!-- Compile and run project, default target -->
  <target name="compileandrun" depends="compile,run">
  </target>


  <!-- Build the project from scratch: copy resources, compile and run -->
  <target name="build" depends="prepare,compile">
  </target>


  <!-- Rebuild project that is: clean and build -->
  <target name="rebuild" depends="clean,build">
  </target>

</project>










