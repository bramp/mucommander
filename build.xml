<project name="mucommander" default="compileandrun" basedir=".">
  <!-- = Application constants =============================== -->
  <!-- ======================================================= -->
  <!-- Version number of the application.                      -->
  <property name="app-version"         value="0.8 beta3"/>
  <!-- Copyright line of the application.                      -->
  <property name="app-copyright"       value="2002-2006"/>
  <!-- URL at which to download the latest version data.       -->
  <property name="app-version-url"     value="http://mucommander.com/version/version.xml"/>
  <!-- URL at which to download the latest nightly data.       -->
  <property name="nightly-version-url" value="http://mucommander.com/version/nightly.xml"/>
  <!-- URL at which to download the latest muco binaries.      -->
  <property name="app-download-url"    value="http://www.mucommander.com/#download"/>
  <property name="homepage-url"        value="http://www.mucommander.com"/>
  <property name="forums-url"          value="http://www.mucommander.com/forums/"/>
  <property name="donation-url"        value="http://www.mucommander.com/#donate"/>



  <!-- = Project architecture ================================ -->
  <!-- ======================================================= -->
  <!-- The following properties define the directory structure -->
  <!-- of the muCommander project.                             -->

  <!-- Directory containing the project's sources.             -->
  <property name="source"         location="source"/>
  <!-- Where to store the application's release files.         -->
  <property name="dist"           location="dist"/>
  <!-- Directory containing all of the project's external      -->
  <!-- libraries.                                              -->
  <!-- Any jar file contained in that directory will be added  -->
  <!-- to the classpath at compile time, and bundled in the    -->
  <!-- application's final JAR file.                           -->
  <property name="lib"            location="lib"/>
  <!-- Directory containing the application's resources.       -->
  <property name="res"	          location="res"/>
  <!-- Directory containing the application's images.          -->
  <property name="images"         location="${res}/images"/>
  <!-- Directory containing the tools used to compile the      -->
  <!-- project.                                                -->
  <property name="tools"          location="tools"/>
  <!-- Path to the file in which to store the unobfuscated     -->
  <!-- application JAR file.                                   -->
  <property name="clear-jar"      location="${dist}/mucommander_unobf.jar"/>
  <!-- Path to the file in which to store the obfuscated       -->
  <!-- application JAR file.                                   -->
  <property name="obf-jar"        location="${dist}/mucommander.jar"/>
  <!-- Where to store temporary files.                         -->
  <property name="tmp"            location="tmp"/>
  <!-- Where to write temporary Java sources.                  -->
  <property name="tmp-source"     location="${tmp}/source"/>
  <!-- Where to store the application's binaries.              -->
  <property name="classes"        location="${tmp}/classes"/>
  <!-- Where to store the tools binaries.                      -->
  <property name="tool-classes"   location="${tmp}/tools"/>
  <!-- Where to store the unobfuscated tools jar file.         -->
  <property name="tool-clear-jar" location="${tmp}/tools_unobf.jar"/>
  <!-- Where to store the obfuscated tools jar file.           -->
  <property name="tool-obf-jar"   location="${tools}/mutasks.jar"/>
  <!-- Where to store the muCommander version file.            -->
  <property name="version-file"   location="${dist}/version.xml"/>
  <!-- Where to store the muCommander tar.gz unix release.     -->
  <property name="dist-tgz"       location="${dist}/mucommander.tar.gz"/>
  <!-- Where to store the muCommander tar.gz unix release.     -->
  <property name="tmp-tgz"       location="${tmp}/tgz"/>

  <!-- Imports the system dependant definitions.               -->
  <import file="local.xml"/>



  <!-- = Maintenance tasks =================================== -->
  <!-- ======================================================= -->
  <!-- Tasks used for the maintenance of the project.          -->

  <!-- Prepares the project's compilations.                    -->
  <target name="init">
    <!-- Sets time stamp to current time/date -->
    <tstamp/>
    <!-- Create class directory used by compile -->
    <mkdir dir="${tmp}"/>
    <mkdir dir="${tmp-source}"/>
    <mkdir dir="${classes}"/>
    <mkdir dir="${tool-classes}"/>
    <!-- Copy images files to {$classes} -->
    <copy todir="${classes}">
      <fileset dir="${images}">
        <include name="**/*"/>
      </fileset>
    </copy>
    <copy file="${res}/dictionary.txt" todir="${classes}"/>
  </target>

  <!-- Deletes any dynamically generated file, effectively     -->
  <!-- re-initialising the whole project.                      -->
  <target name="clean">
    <delete dir="${tmp-source}"/>
    <delete dir="${classes}"/>
    <delete dir="${tool-classes}"/>
    <delete dir="${tmp}"/>
    <delete dir="${dist}"/>
  </target>



  <!-- = Compilation tasks =================================== -->
  <!-- ======================================================= -->
  <!-- Turns debug output on in the resulting binary.          -->
  <target name="debug">
    <property name="is-debug" value="true"/>
  </target>

  <!-- Cleans and rebuilds the project from scratch.           -->
  <target name="rebuild" depends="clean,build"/>

  <!-- Creates all the files required for JAR generation in    -->
  <!-- ${classes}.                                             -->
  <target name="build" depends="includelibs,compile"/>

  <!-- Creates the runtime constant class.                     -->
  <target name="constants">
    <property name="is-debug"    value="true"/>
    <property name="version-url" value="${app-version-url}"/>
    <taskdef name="date" classname="com.mucommander.ant.util.DateTask" classpath="${tool-obf-jar}"/>
    <date name="release-date"/>
    <taskdef name="javaw" classname="com.mucommander.ant.java.JavaTask" classpath="${tool-obf-jar}"/>
    <javaw name="${tmp-source}/com.mucommander.RuntimeConstants">
      <field name="DEBUG"        value="${is-debug}"    type="boolean"/>
      <field name="VERSION"      value="${app-version}"/>
      <field name="COPYRIGHT"    value="${app-copyright}"/>
      <field name="APP_STRING"   value="muCommander v${app-version}"/>
      <field name="VERSION_URL"  value="${version-url}"/>
      <field name="RELEASE_DATE" value="${release-date}" type="String"/>
      <field name="HOMEPAGE_URL" value="${homepage-url}"/>
      <field name="FORUMS_URL"   value="${forums-url}"/>
      <field name="DONATION_URL" value="${donation-url}"/>
    </javaw>
  </target>

  <!-- Compiles all java files found in ${source} and stores   -->
  <!-- the resulting bytecode in {$classes}.                   -->
  <target name="compile" depends="init,constants">
    <javac destdir="${classes}" debug="on" deprecation="on"
           encoding="utf-8" source="1.3" target="1.3">
      <src path="${source}"/>
      <src path="${tmp-source}"/>
      <!-- Includes the application's libraries in the classpath. -->
      <classpath>
        <pathelement location="${classes}"/>
         <fileset dir="${lib}">
          <include name="**/*.jar"/>
         </fileset>
         <pathelement path="${classpath}"/>
      </classpath>
    </javac>
  </target>

  <!-- Includes the application's libraries with its binaries. -->
  <target name="includelibs" depends="init">
    <unjar dest="${classes}">
      <fileset dir="${lib}">
        <include name="**/*.jar"/>
        <!-- Exclude Apple API stubs, used only at compile time -->
        <exclude name="osx-mrj-stubs.jar"/>
        <exclude name="osx-eawt-stubs.jar"/>
    </fileset>
    </unjar>
  </target> 

  <!-- Generates the application's unobfuscated jar file.      -->
  <target name="jar" depends="build">
    <mkdir  dir="${dist}"/>
    <delete file="${clear-jar}"/>
    <jar    jarfile="${clear-jar}"
            basedir="${classes}" manifest="${res}/MANIFEST.MF"/>
  </target>

  <target name="disable-debug">
    <property name="is-debug" value="false"/>
  </target>

  <target name="version">
    <taskdef name="muversion" classname="com.mucommander.ant.version.VersionTask" classpath="${tool-obf-jar}"/>
    <muversion version="${app-version}" url="${app-download-url}" dest="${version-file}"/>
  </target>

  <target name="set-nightly">
    <property name="version-url" value="${nightly-version-url}"/>
  </target>

  <target name="nightly" depends="set-nightly,clean,tools-obfuscate,tgz"/>

  <!-- Generates the application's obfuscated jar file.        -->
  <target name="obfuscate" depends="disable-debug,clean,jar,version">
    <delete file="${obf-jar}"/>
    <taskdef name="proguard" classname="proguard.ant.ProGuardTask" classpath="${proguard}"/>
    <proguard overloadaggressively="on" usemixedcaseclassnames="off" ignorewarnings="on" printseeds="on" optimize="true"
              printusage="${tmp}/obf-usage.txt">
      <injar name="${clear-jar}"/> 
      <outjar name="${obf-jar}"/>
      <libraryjar name="${java-lib}"/>
      <libraryjar name="${lib}"/>
      <libraryjar name="${ant-lib}"/>
      <!-- Mac OS X specifics -->
      <keep name="com.mucommander.ui.macosx.EAWTHandler">
        <method access="public"/>
      </keep>
      <keep name="com.mucommander.ui.macosx.MRJHandler">
        <method access="public"/>
      </keep>
      <!-- Viewer API uses reflection -->
      <keep name="com.mucommander.file.AbstractFile"/>
      <keepclasseswithmembers extends="com.mucommander.ui.viewer.FileViewer">
	<method access="public static" type="boolean" name="canViewFile" parameters="com.mucommander.file.AbstractFile"/> 
      </keepclasseswithmembers>
      <!-- Editor API uses reflection -->
      <keepclasseswithmembers extends="com.mucommander.ui.editor.FileEditor">
	<method access="public static" type="boolean" name="canEditFile" parameters="com.mucommander.file.AbstractFile"/>
      </keepclasseswithmembers>
      <!-- Main class -->
      <keep name="com.mucommander.Launcher">
	<method access="public static" type="void" name="main" parameters="java.lang.String[]"/>
      </keep>
      <!-- jCIFS uses forName -->
      <keep name="jcifs.Config">
	<method access="public" name="*"/>
      </keep>

      <!-- Required by j2ssh library -->
      <keep name="org.apache.commons.logging.*">
        <method access="public" name="*"/>
      </keep> 
      <keep name="org.apache.commons.logging.impl.LogFactoryImpl">
        <method access="public" name="*"/>
      </keep>
    </proguard>
  </target>



  <!-- = Test tasks ========================================== -->
  <!-- ======================================================= -->
  <!-- Launches muCommander in stress test mode, changing      -->
  <!-- current folder every second or so.                      -->
  <target name="stresstest">
    <java classname="com.mucommander.StressTester" fork="true">
      <classpath>
        <pathelement location="${classes}"/>
         <fileset dir="lib">
          <include name="**/*.jar"/>
         </fileset>
        <pathelement path="${classpath}"/>
      </classpath>
    </java>
  </target>

  <!-- Makes sure all of the required icons are present.       -->
  <target name="testicons">
    <java classname="com.mucommander.ui.icon.FileIcons" fork="true">
      <classpath>
        <pathelement location="${classes}"/>
         <fileset dir="${lib}">
          <include name="**/*.jar"/>
         </fileset>
        <pathelement path="${classpath}"/>
      </classpath>
    </java>
  </target>



  <!-- = Ant tools compilation ============================== -->
  <!-- ====================================================== -->
  <!-- Compiles the tools soure code.                         -->
  <target name="tools-compile" depends="init">
    <javac srcdir="${source}/com/mucommander/ant" destdir="${tool-classes}" debug="on" deprecation="on"
           encoding="utf-8" source="1.3" target="1.3"/>
  </target>

  <!-- Generates the clear tools JAR file.                     -->
  <target name="tools-jar" depends="tools-compile">
    <jar destfile="${tool-clear-jar}" basedir="${tool-classes}"/>
  </target>

  <!-- Generates the tools distribution JAR file.              -->
  <target name="tools-obfuscate" depends="clean,tools-jar">
    <taskdef name="proguard" classname="proguard.ant.ProGuardTask" classpath="${proguard}"/>
    <proguard shrink="true" optimize="true" obfuscate="true" allowaccessmodification="true" overloadaggressively="true"
              usemixedcaseclassnames="off" printusage="${tmp}/tools-obf-usage.txt">
      <injar      name="${tool-clear-jar}"/>
      <outjar     name="${tool-obf-jar}"/>
      <libraryjar name="${java-lib}"/>
      <libraryjar name="${ant-lib}"/>

      <!-- Prevents obfuscation of anything that Ant *may* need for nested elements. -->
      <keepclasseswithmembers access="public" type="class">
        <method access="public" name="set*"/>
      </keepclasseswithmembers>

      <keepclasseswithmembers access="public" type="class">
        <method access="public" name="create*"/>
      </keepclasseswithmembers>

      <keepclasseswithmembers access="public" type="class">
        <method access="public" name="main*"/>
      </keepclasseswithmembers>

      <!-- Prevents obfuscation of anything that Ant will need for Tasks. -->
      <keep access="public" type="class" extends="org.apache.tools.ant.Task">
        <method access="public" name="add*"/>
        <method access="public" name="create*"/>
        <method access="public" name="createConfigured*"/>
        <method access="public" name="execute"/>
      </keep>
    </proguard>
  </target>



  <!-- = Application lauching tasks ========================= -->
  <!-- ====================================================== -->
   <!-- Launches mucommander from the distribution JAR file.  -->
  <target name="runjar">
    <java jar="${clear-jar}" fork="true"/>
  </target>

   <!-- Compile and run project, default target.              -->
  <target name="compileandrun" depends="compile,run"/>

  <!-- Runs the application from unpackaged binaries.         -->
  <target name="run">
    <java classname="com.mucommander.Launcher" fork="true">
      <classpath>
        <pathelement location="${classes}"/>
        <fileset dir="${lib}">
          <include name="**/*.jar"/>
        </fileset>
        <pathelement path="${classpath}"/>
      </classpath>
    </java>
  </target>



  <!-- = Release tasks ======================================= -->
  <!-- ======================================================= -->

   <!-- Generates a UNIX tar.gz distribution of muCommander.  -->
  <target name="tgz" depends="obfuscate">
    <!-- Stores the content of the tgz in a directory.        -->
    <mkdir dir="${tmp-tgz}"/>
    <copy todir="${tmp-tgz}">
      <fileset file="${obf-jar}"/>
      <fileset file="license.txt"/>
      <fileset file="readme.txt"/>
      <fileset file="${res}/mucommander.sh"/>
    </copy>

    <!-- Escapes the version number for the TGZ prefix.       -->
    <taskdef name="strreplace" classname="com.mucommander.ant.util.ReplaceTask" classpath="${tool-obf-jar}"/>
    <strreplace from="mucommander-${app-version}" to="tgz-prefix" what="[ .]" with="_"/>

    <!-- Generates the TGZ file, keeping execution flags.     -->
    <tar destfile="${dist-tgz}" compression="gzip">
      <tarfileset dir="${tmp-tgz}" mode="755" prefix="${tgz-prefix}">
        <include name="**.sh"/>
      </tarfileset>
      <tarfileset dir="${tmp-tgz}" prefix="${tgz-prefix}">
        <exclude name="**.sh"/>
      </tarfileset>
    </tar>
  </target>

  <target name="dmg" depends="obfuscate">
  </target>

  <target name="webstart" depends="obfuscate">
  </target>
</project>
