<project name="mucommander" default="compileandrun" basedir=".">
  <!-- = Application constants =============================== -->
  <!-- ======================================================= -->
  <!-- The following properties define application specific    -->
  <!-- constants, such as the current version number.          -->

  <!-- Version number of the application.                      -->
  <property name="app.version"         value="0.8"/>
  <!-- Minor version number of the application.                -->
  <property name="app.subversion"      value=""/>
  <!-- Copyright line of the application.                      -->
  <property name="app.copyright"       value="2002-2007"/>
  <!-- Targeted version of the JVM.                            -->
  <!-- Note that this has got to match the following format:   -->
  <!-- <MAJOR_VERSION>.<MINOR_VERSION>                         -->
  <property name="app.jvm"             value="1.4"/>



  <!-- = Application URLs ==================================== -->
  <!-- ======================================================= -->
  <!-- Various URLs used by the application.                   -->
  <!-- Idealy, those should never change, as it may cause      -->
  <!-- problems between different versions of muCommander.     -->

  <!-- Homepage of the application.                            -->
  <property name="url.homepage"        value="http://www.mucommander.com"/>
  <!-- URL at which to download the latest version data.       -->
  <property name="url.app-version"     value="${url.homepage}/version/version.xml"/>
  <!-- URL at which to download the latest nightly version     -->
  <!-- data.                                                   -->
  <property name="url.nightly-version" value="${url.homepage}/version/nightly.xml"/>
  <!-- URL to which users should be directed in order to       -->
  <!-- download the latest version of muCommander.             -->
  <property name="url.app-download"    value="${url.homepage}/#download"/>
  <!-- URL to which users should be directed in order to       -->
  <!-- browse the muCommander forums.                          -->
  <property name="url.forums"          value="${url.homepage}/forums/"/>
  <!-- URL to which users should be directed in order to       -->
  <!-- report a bug in the application.                        -->
  <property name="url.bug-repository"  value="${url.homepage}/bugs/"/>
  <!-- URL to which users should be directed in the unlikely   -->
  <!-- event that they'd want to donate money to the project.  -->
  <property name="url.donation"        value="${url.homepage}/#donate"/>



  <!-- = Misc values ========================================= -->
  <!-- ======================================================= -->
  <!-- Directory containing all of the project's external      -->
  <!-- libraries.                                              -->
  <property name="lib"                 location="lib"/>
  <!-- Application's main class.                               -->
  <property name="main-class"          value="com.mucommander.Launcher"/>
  <!-- Where to store the application's release files.         -->
  <!-- This must be stored as a value rather than a location   -->
  <!-- because it's used in the source tar.gz filter.          -->
  <property name="dist"                value="dist"/>
  <!-- Where to store temporary files.                         -->
  <!-- This must be stored as a value rather than a location   -->
  <!-- because it's used in the source tar.gz filter.          -->
  <property name="tmp"                 value="tmp"/>
  <!-- Where to store the muCommander version file.            -->
  <property name="version-file"        location="${dist}/version.xml"/>



  <!-- = Bytecode values ===================================== -->
  <!-- ======================================================= -->
  <!-- Where to store the application's binaries.              -->
  <property name="classes.normal"      location="${tmp}/classes"/>
  <!-- Where to store the obfuscated application's binaries.   -->
  <property name="classes.obf"         location="${tmp}/classes-obf"/>
  <!-- Where to store the tools binaries.                      -->
  <property name="classes.tools"       location="${tmp}/tools"/>



  <!-- = Source values ======================================= -->
  <!-- ======================================================= -->
  <!-- Directory containing the project's sources.             -->
  <property name="source.src"          location="source"/>
  <!-- Where to write temporary Java sources.                  -->
  <property name="source.tmp"          location="${tmp}/source"/>



  <!-- = Resources values ==================================== -->
  <!-- ======================================================= -->
  <!-- Directory containing the application's resources.       -->
  <property name="res"	               location="res"/>
  <!-- Path to muCommander's readme.txt file.                  -->
  <property name="res.readme"          location="readme.txt"/>
  <!-- Path to muCommander's license.txt file.                 -->
  <property name="res.license"         location="license.txt"/>
  <!-- Path to muCommander's dictionnary.                      -->
  <property name="res.dictionary"      location="${res}/dictionary.txt"/>
  <!-- Directory containing the application's images.          -->
  <property name="res.images"          location="${res}/images"/>



  <!-- = Documentation values ================================ -->
  <!-- ======================================================= -->
  <!-- Where to generate muCommander documentation.            -->
  <property name="doc"                 location="docs"/>
  <!-- Where to generate the muCommander API javadoc.          -->
  <property name="doc.api"             location="${doc}/api"/>
  <!-- Where to generate the muCommander tools API javadoc.    -->
  <property name="doc.tools"           location="${doc}/tools"/>
  <!-- Path to the file in which to store the tools'           -->
  <!-- API documentation as a zip file.                        -->
  <property name="doc.tools-tgz"       location="${dist}/mucommander-tools-api.tar.gz"/>
  <!-- Path to the file in which to store the application's    -->
  <!-- API documentation as a zip file.                        -->
  <property name="doc.api-tgz"         location="${dist}/mucommander-api.tar.gz"/>



  <!-- = Tools values ======================================== -->
  <!-- ======================================================= -->
  <!-- Directory containing the tools used to compile the      -->
  <!-- project.                                                -->
  <property name="tools"               location="tools"/>
  <!-- Where to store the JAR file containing the muCommander  -->
  <!-- Ant tasks.                                              -->
  <property name="tools.jar"           location="${tools}/mutasks.jar"/>



  <!-- = Portable version values ============================= -->
  <!-- ======================================================= -->
  <!-- Portable release scripts.                               -->
  <property name="portable.dir"        location="${res}/portable"/>
  <!-- Temporary directory for the portable scripts.           -->
  <property name="portable.tmp"        location="${tmp}/portable"/>
  <!-- POSIX portable muCommander startup script.              -->
  <property name="portable.sh"         location="${portable.tmp}/mucommander.sh"/>
  <!-- Win32 portable muCommander startup script.              -->
  <property name="portable.exe"        location="${portable.tmp}/mucommander.exe"/>



  <!-- = Theme values ======================================== -->
  <!-- ======================================================= -->
  <!-- Name of the theme description file.                     -->
  <property name="themes.desc"         value="/themes.xml"/>
  <!-- Where to read the themes from.                          -->
  <property name="themes.in"           location="${res}/themes"/>
  <!-- Where in ${classes.normal} to copy the different themes.       -->
  <property name="themes.out"          value="/themes"/>



  <!-- = Win32 executable values ============================= -->
  <!-- ======================================================= -->
  <!-- Where to store the muCommander win32 executable file.   -->
  <property name="exe.name"            value="muCommander.exe"/>
  <!-- Folder in which to store the muCommander Win32          -->
  <!-- executable release.                                     -->
  <property name="exe.file"            value="${dist}/${exe.name}"/>



  <!-- = MAC OS X app values ================================= -->
  <!-- ======================================================= -->
  <!-- Where to store the muCommander app Mac OS X release.    -->
  <property name="app.name"            value="muCommander.app"/>
  <!-- Folder in which to store the muCommander app Mac OS X   -->
  <!-- release.                                                -->
  <property name="app.folder"          location="${dist}/${app.name}"/>



  <!-- = NSIS values ========================================= -->
  <!-- ======================================================= -->
  <!-- Directory containing the various NSIS scripts and files -->
  <property name="nsis.dir"            location="${res}/nsis"/>
  <!-- Path to the NSIS script template.                       -->
  <property name="nsis.script"         location="${nsis.dir}/mucommander.nsi"/>
  <!-- Path to the Win32 icons.                                -->
  <property name="nsis.icon"           location="${nsis.dir}/mucommander.ico"/>
  <!-- Directory in which NSIS will store its temporary files. -->
  <property name="nsis.tmp"            location="${tmp}/nsis"/>



  <!-- = Debian values ======================================= -->
  <!-- ======================================================= -->
  <!-- Directory in which the deb scripts are stored.          -->
  <property name="deb.dir"             location="${res}/deb"/>
  <!-- Directory in which to store .deb temporary files.       -->
  <property name="deb.tmp"             location="${tmp}/deb"/>
  <!-- Data part of the debian package.                        -->
  <property name="deb.data"            location="${deb.tmp}/data"/>
  <!-- Control part of the debian package.                     -->
  <property name="deb.control"         location="${deb.tmp}/control"/>


  <!-- = Different JAR files ================================= -->
  <!-- ======================================================= -->
  <!-- Path to the file in which to store the unobfuscated     -->
  <!-- application JAR file.                                   -->
  <property name="jar.normal"          location="${dist}/mucommander_unobf.jar"/>
  <!-- Path to the file in which to store the obfuscated       -->
  <!-- application JAR file.                                   -->
  <property name="jar.obf"             location="${dist}/mucommander_obf.jar"/>
  <!-- Path toe the file inw hich to store the compressed      -->
  <!-- application JAR file.                                   -->
  <property name="jar.cmp"             location="${dist}/mucommander.jar"/>
  <!-- Path to the file in which to store the obfuscated,      -->
  <!-- signed application JAR file.                            -->
  <property name="jar.signed"          location="${dist}/mucommander_signed.jar"/>



  <!-- = JNLP values ========================================= -->
  <!-- ======================================================= -->
  <!-- Codebase for the 'normal' muCommander JNLP file.        -->
  <property name="url.jnlp.normal"     value="http://www.mucommander.com/webstart/"/>
  <!-- Codebase for the 'nightly' muCommander JNLP file.       -->
  <property name="url.jnlp.nightly"    value="http://www.mucommander.com/webstart/nightly/"/>
  <!-- Name of the icon used by the JNLP file.                 -->
  <property name="jnlp.icon"           value="icon.gif"/>
  <!-- Name of the muCommander JNLP file.                      -->
  <property name="jnlp.file"           value="mucommander.jnlp"/>



  <!-- Imports the system dependant definitions.               -->
  <import file="local.xml"/>



  <!-- = Maintenance targets ================================= -->
  <!-- ======================================================= -->
  <!-- Tasks used for the maintenance of the project.          -->

  <!-- Deletes any dynamically generated file, effectively     -->
  <!-- re-initialising the whole project.                      -->
  <target name="clean">
    <echo>Deleting temporary files</echo>
    <delete dir="${source.tmp}"/>
    <delete dir="${classes.normal}"/>
    <delete dir="${classes.tools}"/>
    <delete dir="${tmp}"/>
    <delete dir="${dist}"/>
    <delete dir="${doc.api}"/>
    <delete dir="${doc}"/>
    <delete dir="${deb.tmp}"/>
    <delete dir="${deb.control}"/>
    <delete dir="${deb.data}"/>
    <echo>Deleting emacs backup files</echo>
    <delete includeEmptyDirs="true">
      <fileset dir="." includes="**/*~" defaultexcludes="no"/>
    </delete>
  </target>



  <!-- = Resources generation ================================ -->
  <!-- ======================================================= -->
  <target name="load-mkresources" depends="tools-jar">
    <taskdef name="mkresources" classname="com.mucommander.ant.res.ResourceTask" classpath="${tools.jar}"/>
  </target>

  <!-- Copies the project's resources.                         -->
  <!-- All resources will be copied in ${classes.normal}.      -->
  <target name="resources" depends="load-mkresources">
    <echo>Copying resources</echo>
    <copy todir="${classes.normal}" overwrite="true">
      <fileset dir="${res.images}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <copy  file="${res.dictionary}"        tofile="${classes.normal}/dictionary.txt" overwrite="true"/>
    <copy  file="${res}/mime.types"        todir="${classes.normal}" overwrite="true"/>
    <copy  file="${res}/toolbar.xml"       todir="${classes.normal}" overwrite="true"/>
    <copy  file="${res}/command_bar.xml"   todir="${classes.normal}" overwrite="true"/>
    <copy  file="${res}/action_keymap.xml" todir="${classes.normal}" overwrite="true"/>

    <echo>Creating themes</echo>
    <mkresources outfile="${classes.normal}/${themes.desc}" outdir="${classes.normal}">
      <file out="${themes.out}/ClassicCommander.xml" in="${themes.in}/ClassicCommander.xml"/>
      <file out="${themes.out}/Native.xml"           in="${themes.in}/Native.xml"/>
      <file out="${themes.out}/RetroCommander.xml"   in="${themes.in}/RetroCommander.xml"/>
    </mkresources>
  </target>



  <!-- = External libraries management ======================= -->
  <!-- ======================================================= -->
  <target name="check-libs" unless="libs.up-to-date">
    <uptodate property="libs.up-to-date" targetfile="${jar.normal}">
      <srcfiles dir="${lib}" includes="**/*.jar"/>
    </uptodate>
  </target>

  <!-- Includes the application's libraries with its binaries. -->
  <!-- All libraries will be unpacked in ${classes.normal}.    -->
  <target name="include-libs" depends="check-libs" unless="libs.up-to-date">
    <echo>Unpacking libraries in ${classes.normal}</echo>
    <unjar dest="${classes.normal}">
      <fileset dir="${lib}">
        <include name="**/*.jar"/>
        <!-- Exclude APIs that are used only at compile time.  -->
        <exclude name="osx-eawt-stubs.jar"/>
        <exclude name="osx-cocoa.jar"/>
        <exclude name="servlet-api.jar"/>
    </fileset>
    </unjar>

    <!-- Makes sure that muCommander's JAR file does not       -->
    <!-- inherit license and copyright from libraries.         -->
    <delete dir="${classes.normal}/META-INF"/>

    <!-- Makes sure that library documentation doesn't get     -->
    <!-- included in the final jar.                            -->
    <delete>
      <fileset dir="${classes.normal}" includes="**/*.html"/>
      <fileset dir="${classes.normal}" includes="**/*.css"/>
    </delete>

    <!-- Deletes unused JCifs resouces.                        -->
    <delete file="${classes.normal}/jcifs/util/mime.map"/>
  </target> 



  <!-- = Name and date generation ============================ -->
  <!-- ======================================================= -->
  <target name="load-strreplace" depends="tools-jar">
    <taskdef name="strreplace" classname="com.mucommander.ant.util.ReplaceTask" classpath="${tools.jar}"/>
  </target>

  <target name="load-date" depends="tools-jar">
    <taskdef name="date" classname="com.mucommander.ant.util.DateTask" classpath="${tools.jar}"/>
  </target>

  <!-- Stores today's date in ${release-date.}                 -->
  <target name="build-date" depends="load-date">
    <date name="release-date"/>
  </target>

  <!-- Generates the package-prefix for nightly builds.        -->
  <target name="nightly-prefix" if="is-nightly">
    <echo>Creating nightly package name prefix</echo>
    <property name="package-prefix" value="mucommander"/>
  </target>

  <!-- Generates the package-prefix for non-nightly builds.    -->
  <target name="release-prefix" depends="load-strreplace" unless="is-nightly">
    <echo>Creating release package name prefix</echo>
    <strreplace from="mucommander-${app.version}${app.subversion}" to="package-prefix" what="[ .]" with="_"/>
  </target>

  <!-- Generates the current build's package prefix.           -->
  <!-- The package prefix will be stored in ${package-prefix}, -->
  <!-- and depends on whether we're compiling a nightly build  -->
  <!-- or an official release one.                             -->
  <target name="package-prefix" depends="nightly-prefix,release-prefix"/>

  <!-- Generates the prefix folder for all archives.           -->
  <!-- Output will be stored in property ${archive-prefix}.    -->
  <target name="archive-prefix" depends="load-strreplace">
    <echo>Creating archive prefix</echo>
    <!-- Escapes the version number for the TGZ prefix.        -->
    <strreplace from="muCommander-${app.version}${app.subversion}" to="archive-prefix" what="[ .]" with="_"/>
  </target>



  <!-- = Compilation targets ================================= -->
  <!-- ======================================================= -->
  <!-- The following targets are used to generate the clear    -->
  <!-- muCommander JAR file.                                   -->
  <!-- The only target that should be referenced is 'jar', as  -->
  <!-- the other ones are only helper targets.                 -->

  <target name="load-javaw" depends="tools-jar">
    <taskdef name="javaw" classname="com.mucommander.ant.java.JavaTask" classpath="${tools.jar}"/>
  </target>


  <!-- Creates the runtime constant class.                     -->
  <!-- Output will be stored in ${source.tmp}.                 -->
  <target name="constants" depends="build-date,load-javaw">
    <echo>Creating ${source.tmp}/com.mucommander.RuntimeConstants</echo>
    <mkdir dir="${source.tmp}"/>
    <property name="is-debug"    value="true"/>
    <property name="version-url" value="${url.app-version}"/>
    <javaw name="${source.tmp}/com.mucommander.RuntimeConstants">
      <field name="DEBUG"               value="${is-debug}"    type="boolean"/>
      <field name="VERSION"             value="${app.version}${app.subversion}"/>
      <field name="COPYRIGHT"           value="${app.copyright}"/>
      <field name="APP_STRING"          value="muCommander v${app.version}${app.subversion}"/>
      <field name="VERSION_URL"         value="${version-url}"/>
      <field name="RELEASE_DATE"        value="${release-date}" type="String"/>
      <field name="HOMEPAGE_URL"        value="${url.homepage}"/>
      <field name="FORUMS_URL"          value="${url.forums}"/>
      <field name="DONATION_URL"        value="${url.donation}"/>
      <field name="DICTIONARY_FILE"     value="/dictionary.txt"/>
      <field name="THEMES_FILE"         value="${themes.desc}"/>
      <field name="THEMES_PATH"         value="${themes.out}"/>
      <field name="BUG_REPOSITORY_URL"  value="${url.bug-repository}"/>
      <field name="DEFAULT_THEME"       value="Native"/>
    </javaw>
  </target>

  <!-- Compiles all java files found in ${source.src} and      -->
  <!-- ${source.tmp}, and stores the resulting bytecode in     -->
  <!-- {$classes.normal}.                                      -->
  <target name="compile" depends="constants">
    <echo>Compiling sources into ${classes.normal}</echo>
    <mkdir dir="${classes.normal}"/>
    <javac destdir="${classes.normal}" debug="on" deprecation="on"
           encoding="utf-8" source="${app.jvm}" target="${app.jvm}">
      <src path="${source.src}"/>
      <src path="${source.tmp}"/>
      <!-- Includes the application's libraries in the         -->
      <!-- classpath.                                          -->
      <classpath>
         <fileset dir="${lib}">
          <include name="**/*.jar"/>
         </fileset>
      </classpath>
    </javac>
  </target>

  <!-- Generates the application's uncompressed, unobfuscated  -->
  <!-- JAR file.                                               -->
  <!-- Output will be stored in {$jar.normal}.                 -->
  <target name="jar" depends="compile,include-libs,resources,build-date">
    <echo>Creating unobfuscated JAR file in ${jar.normal}</echo>
    <mkdir dir="${dist}"/>
    <jar jarfile="${jar.normal}" basedir="${classes.normal}" compress="false">
      <manifest>
        <attribute name="Main-Class"             value="${main-class}"/>
        <attribute name="Specification-Title"    value="muCommander"/>
        <attribute name="Specification-Vendor"   value="Maxence Bernard"/>
        <attribute name="Specification-Version"  value="${app.version}"/>
        <attribute name="Implementation-Title"   value="muCommander"/>
        <attribute name="Implementation-Vendor"  value="Maxence Bernard"/>
        <attribute name="Implementation-Version" value="${app.version}${app.subversion} ${release-date}"/>
      </manifest>
    </jar>
  </target>



  <!-- = Obfuscation targets ================================= -->
  <!-- ======================================================= -->
  <!-- The following targets are used to obfuscate the         -->
  <!-- muCommander bytecode.                                   -->
  <!-- The only target that should be refered is 'obfuscate',  -->
  <!-- as all the other ones are used to figure out the best   -->
  <!-- obfuscation policy.                                     -->

  <!-- Checks whether proGuard is available or not.            -->
  <!-- The result will be stored in ${proguard.available}.     -->
  <target name="check-proguard">
    <condition property="proguard.available" value="true">
      <available file="${proguard.lib}" type="file"/>
    </condition>
  </target>  

  <!-- Copies ${jar.normal} to ${jar.obf}.                     -->
  <!-- This target is meant to be used when it was not         -->
  <!-- to load the proGuard task.                              -->
  <target name="copy-bytecode" unless="proguard.available">
    <echo>proGuard unavailable, copying unobfuscated JAR file to ${jar.obf}</echo>
    <copy file="${jar.normal}" tofile="${jar.obf}" overwrite="true"/>
  </target>

  <!-- Obfuscates the clear JAR file and stores the result in  -->
  <!-- ${jar.obf}.                                             -->
  <target name="obfuscate-bytecode" if="proguard.available">
    <echo>Creating obfuscated JAR file in ${jar.obf}</echo>
    <taskdef name="proguard" classname="proguard.ant.ProGuardTask" classpath="${proguard.lib}"/>
    <proguard overloadaggressively="true" usemixedcaseclassnames="true" ignorewarnings="true" optimize="true" shrink="true" obfuscate="true"
              printmapping="${tmp}/obfuscate.map" printusage="${tmp}/obf-usage.txt" printseeds="${tmp}/obf-seeds.txt"
              allowaccessmodification="true" defaultpackage="" skipnonpubliclibraryclasses="false">
      <injar name="${jar.normal}"/> 
      <outjar name="${jar.obf}"/>
      <libraryjar name="${java.lib}"/>
      <libraryjar name="${ant.lib}"/>
      <libraryjar name="${lib}/osx-eawt-stubs.jar"/>
      <libraryjar name="${lib}/osx-cocoa.jar"/>
      <libraryjar name="${lib}/osx-growl.jar"/>
      <libraryjar name="${lib}/servlet-api.jar"/>

      <!-- Viewer API uses reflection                          -->
      <keep name="com.mucommander.file.AbstractFile"/>
      <keepclasseswithmembers extends="com.mucommander.ui.viewer.FileViewer">
	<method access="public static" type="boolean" name="canViewFile" parameters="com.mucommander.file.AbstractFile"/>
      </keepclasseswithmembers>
      <!-- Editor API uses reflection                          -->
      <keepclasseswithmembers extends="com.mucommander.ui.editor.FileEditor">
	<method access="public static" type="boolean" name="canEditFile" parameters="com.mucommander.file.AbstractFile"/>
      </keepclasseswithmembers>
      <!-- Action API uses reflection                          -->
      <keepclasseswithmembers extends="com.mucommander.ui.action.MucoAction">
        <constructor access="public" name="*"/>
      </keepclasseswithmembers>
      <!-- File API uses reflection                            -->
      <keepclasseswithmembers extends="com.mucommander.file.AbstractFile">
        <constructor access="public" name="*"/>
      </keepclasseswithmembers>
      <!-- Yanfs uses reflection                               -->
      <keep name="com.sun.nfs.XFileAccessor"/>
      <keep name="com.sun.nfs.XFileExtensionAccessor"/>
      <!-- Main class                                          -->
      <keep name="${main-class}">
	<method access="public static" type="void" name="main" parameters="java.lang.String[]"/>
      </keep>
    </proguard>
  </target>

  <!-- Disables debug instructions in the generated binaries.  -->
  <target name="disable-debug">
    <echo>Disabling debug</echo>
    <property name="is-debug" value="false"/>
  </target>

  <!-- Generates the application's obfuscated jar file.        -->
  <!-- Output will be stored in ${jar.obf}.                    -->
  <target name="obfuscate" depends="disable-debug,clean,jar,check-proguard,copy-bytecode,obfuscate-bytecode"/>



  <!-- = Compression targets ================================= -->
  <!-- ======================================================= -->
  <!-- The following targets are used to compress the final    -->
  <!-- JAR file.                                               -->
  <!-- The only target that should be referenced is 'compress' -->
  <!-- as the other ones are meant to identify the best        -->
  <!-- compression policy.                                     -->

  <!-- Checks whether 7za is available.                        -->
  <!-- The result will be stored in ${7za.available}.          -->
  <target name="check-7za">
    <condition property="7za.available" value="true">
      <available file="${7za.executable}" type="file"/>
    </condition>
  </target>  

  <!-- Copies ${jar.obf} over ${jar.cmp}.                      -->
  <!-- This target is meant to be used when 7za is found not   -->
  <!-- to be available.                                        -->
  <target name="copy-obfuscated" unless="7za.available">
    <echo>7za unavailable, using standard compression for ${jar.cmp}</echo>
    <unjar src="${jar.obf}" dest="${classes.obf}"/>
    <jar jarfile="${jar.cmp}" basedir="${classes.obf}"/>
  </target>

  <!-- Compress the content of ${jar.obf} into ${jar.cmp}.     -->
  <!-- This target is meant to be used when 7za is found to be -->
  <!-- available.                                              -->
  <target name="compress-obfuscated" if="7za.available">
    <echo>Creating compressed JAR file to ${jar.cmp}</echo>
    <unjar src="${jar.obf}" dest="${classes.obf}"/>
    <exec executable="${7za.executable}" dir="${classes.obf}">
      <arg value="a"/>
      <arg value="-tzip"/>
      <arg value="-mm=Deflate"/>
      <arg value="-mx9"/>
      <arg value="-mfb=258"/>
      <arg value="-mpass=15"/>
      <arg value="${jar.cmp}"/>
      <arg value="*"/>
    </exec>
  </target>

  <!-- Generates the final appliation JAR depending on the     -->
  <!-- availability of 7za.                                    -->
  <target name="compress" depends="obfuscate,check-7za,copy-obfuscated,compress-obfuscated"/>



  <!-- = Launch4j management ================================= -->
  <!-- ======================================================= -->
  <!-- The following targets are used to deal with launch4j's  -->
  <!-- availability.                                           -->
  <!-- Only 'load-launch4j' should be referenced, as the other -->
  <!-- targets are only helper ones.                           -->

  <!-- Checks whether launch4j is available.                   -->
  <!-- Output will be stored in ${launch4j.available}.         -->
  <!-- If the build is not in 'release' mode and Launch4j      -->
  <!-- isn't properly configured, this task will fail the      -->
  <!-- build.                                                  -->
  <target name="check-launch4j">
    <condition property="launch4j.available" value="true">
      <and>
        <available file="${launch4j.dir}" type="dir"/>
        <!-- If the property is defined but empty, it will     -->
        <!-- default to #{user.dir}. We must make sure this    -->
        <!-- doesn't happen.                                   -->
        <not>
          <equals arg1="${launch4j.dir}" arg2="${user.dir}" trim="true"/>
        </not>
      </and>
    </condition>

    <!-- If launch4j is not available and we're not in         -->
    <!-- release mode, we must fail the build here.            -->
    <fail message="Launch4j not configured">
      <condition>
        <and>
          <not>
            <istrue value="${is-release}"/>
          </not>
          <not>
            <istrue value="${launch4j.available}"/>
          </not>
        </and>
      </condition>
    </fail>
  </target>

  <!-- Loads the launch4j task if it's available.              -->
  <!-- If the operation was a success, ${launch4j.available}   -->
  <!-- will be set to true.                                    -->
  <target name="load-launch4j" depends="check-launch4j" if="launch4j.available">
    <taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="${launch4j.dir}/launch4j.jar:${launch4j.dir}/xstream.jar"/>
  </target>



  <!-- = Windows executable ================================== -->
  <!-- ======================================================= -->
  <!-- The following targets are used to create a Win32        -->
  <!-- executable file.                                        -->
  <!-- Only 'exe' should be referenced, as the other ones are  -->
  <!-- only helper targets.                                    -->

  <!-- Creates a Win32 executable and stores the output in     -->
  <!-- ${exe.file}.                                            -->
  <!-- This target will only be executed if launch4j is found  -->
  <!-- to be available.                                        -->
  <target name="make-exe" depends="compress" if="launch4j.available">
    <echo>Creating Win32 executable in ${exe.file}</echo>
    <launch4j>
      <config outfile="${exe.file}" jarpath="${jar.cmp}" icon="${nsis.icon}">
        <jre minversion="${app.jvm}.0"/>
      </config>
    </launch4j>
  </target>

  <!-- Notifies the user that the executable file couldn't be  -->
  <!-- created for lack of Launch4j.                           -->
  <target name="skip-exe" unless="launch4j.available">
    <echo>Launch4j not available, skipping Win32 executable creation.</echo>
  </target>

  <!-- Creates a Win32 executable.                             -->
  <!-- This depends on launch4j being properly configured.     -->
  <!-- If it is, output will be stored in ${exe.file}.         -->
  <!-- Otherwise, this target will be skipped.                 -->
  <target name="exe" depends="load-launch4j,make-exe,skip-exe"/>



  <!-- = Windows setup ======================================= -->
  <!-- ======================================================= -->
  <!-- The following tasks are used to generate a Win32 setup. -->
  <!-- Only 'setup-exe' should be referenced, as the other     -->
  <!-- tasks are only helper ones.                             -->

  <!-- Checks whether nsis is available.                       -->
  <!-- Output is stored in ${nsis.available}.                  -->
  <!-- If the build is not in 'release' mode and NSIS isn't    -->
  <!-- properly configured, this task will fail the build.     -->
  <target name="check-nsis">
    <condition property="nsis.available" value="true">
      <and>
        <available file="${nsis.executable}" type="file"/>
      </and>
    </condition>

    <!-- If nsis is not available and we're not in release     -->
    <!-- mode, we must fail the build here.                    -->
    <fail message="NSIS not configured">
      <condition>
        <and>
          <not>
            <istrue value="${is-release}"/>
          </not>
          <not>
            <istrue value="${nsis.available}"/>
          </not>
        </and>
      </condition>
    </fail>
  </target>

  <!-- Loads the nsis task if it's available.                  -->
  <!-- If the task was succesfully loaded, ${nsis.available}   -->
  <!-- will contain true.                                      -->
  <target name="load-nsis" depends="tools-jar,check-nsis" if="nsis.available">
    <taskdef name="nsis" classname="com.mucommander.ant.nsis.NsisTask" classpath="${tools.jar}"/>
  </target>

  <!-- Checks whether it's possible to generate a setup.       -->
  <!-- Output will be stored in ${setup.available}.            -->
  <target name="check-setup" depends="load-launch4j,load-nsis">
    <condition property="setup.available" value="true">
      <and>
        <istrue value="${nsis.available}"/>
        <istrue value="${launch4j.available}"/>
      </and>
    </condition>
  </target>

  <target name="load-crlf" depends="tools-jar">
    <taskdef name="crlf" classname="com.mucommander.ant.util.CRLFTask" classpath="${tools.jar}"/>
  </target>

  <!-- Creates a windows setup file and stores the output in   -->
  <!-- ${dist}/${package-prefix}.exe.                          -->
  <target name="make-setup" depends="load-crlf,package-prefix,exe" if="setup.available">
    <echo>Creating NSIS installer in ${dist}/${package-prefix}.exe</echo>

    <!-- Prepares the NSIS directory.                          -->
    <mkdir dir="${nsis.tmp}"/>
    <copy file="${exe.file}"             tofile="${nsis.tmp}/muCommander.exe" overwrite="true"/>
    <copy file="${nsis.icon}"            tofile="${nsis.tmp}/mucommander.ico" overwrite="true"/>

    <!-- Makes sure readme.txt and license.txt contain         -->
    <!-- proper windows linebreaks.                            -->
    <crlf in="${res.readme}"  out="${nsis.tmp}/readme.txt"/>
    <crlf in="${res.license}" out="${nsis.tmp}/license.txt"/>

    <!-- Generates the NSIS script.                            -->
    <nsis in="${nsis.script}" out="${nsis.tmp}/mucommander.nsi">
      <var name="MU_VERSION" value="${app.version}${app.subversion}"/>
      <var name="MU_EXE"     value="muCommander.exe"/>
      <var name="MU_ICON"    value="mucommander.ico"/>
      <var name="MU_OUT"     value="mucommander-setup.exe"/>
      <var name="MU_README"  value="readme.txt"/>
      <var name="MU_LICENSE" value="license.txt"/>
    </nsis>

    <!-- Generates the muCommander windows installer.          -->
    <exec executable="${nsis.executable}">
      <arg value="${nsis.tmp}/mucommander.nsi"/>
    </exec>

    <!-- Copies the installer in the dist folder.              -->
    <copy file="${nsis.tmp}/mucommander-setup.exe" tofile="${dist}/${package-prefix}-setup.exe" overwrite="true"/>
  </target>

  <!-- Notifies the user that the system is not properly       -->
  <!-- configured for setup generation.                        -->
  <target name="skip-setup" unless="setup.available">
    <echo>Setup generation unavailable, skipping.</echo>
  </target>

  <!-- Generates a Win32 setup and stores the output in        -->
  <!-- ${dist}/${package-prefix}-setup.exe.                    -->
  <target name="setup-exe" depends="check-setup,make-setup,skip-setup"/>



  <!-- = Debian package ====================================== -->
  <!-- ======================================================= -->

  <!-- Checks whether the JDeb task is available.              -->
  <!-- Output is stored in ${jdeb.available}.                  -->
  <target name="check-jdeb">
    <condition property="jdeb.available" value="true">
      <and>
        <available file="${jdeb.lib}" type="file"/>
      </and>
    </condition>

    <!-- If JDeb is not available and we're not in release     -->
    <!-- mode, we must fail the build here.                    -->
    <fail message="JDeb not configured">
      <condition>
        <and>
          <not>
            <istrue value="${is-release}"/>
          </not>
          <not>
            <istrue value="${jdeb.available}"/>
          </not>
        </and>
      </condition>
    </fail>
  </target>

  <!-- Loads the jdeb task if it's available.                  -->
  <!-- If it is, ${jdeb.available} will be set to true.        -->
  <target name="load-jdeb" depends="check-jdeb" if="jdeb.available">
    <taskdef name="jdeb" classname="org.vafer.jdeb.DebAntTask" classpath="${jdeb.lib}"/>
  </target>

  <!-- Loads the mksize task.                                  -->
  <target name="load-mksize" depends="tools-jar">
    <taskdef name="mksize" classname="com.mucommander.ant.util.SizeTask" classpath="${tools.jar}"/>
  </target>

  <!-- Generates the nightly debian names and version numbers. -->
  <target name="nightly-deb" depends="load-strreplace,build-date" if="is-nightly">
    <strreplace from="${app.version}${app.subversion} ${release-date}" to="deb.version" what="[ ]" with="-"/>
    <property name="deb.name" value="mucommander_current_all.deb"/>
  </target>

  <!-- Generates the current debian names and version numbers. -->
  <target name="release-deb" depends="load-strreplace" unless="is-nightly">
    <strreplace from="${app.version}${app.subversion}" to="deb.version" what="[ ]" with="-"/>
    <property name="deb.name" value="mucommander_${deb.version}_all.deb"/>
  </target>

  <!-- Generates the muCommander debian package.               -->
  <!-- Output will be stored in ${dist}/${deb.name}.           -->
  <target name="make-deb" depends="release-deb,nightly-deb,load-mksize,compress" if="jdeb.available">
    <!-- Creates the required directories.                     -->
    <echo>Creating debian package in ${dist}/${deb.name}</echo>
    <mkdir dir="${deb.tmp}"/>
    <mkdir dir="${deb.control}"/>
    <mkdir dir="${deb.data}"/>
    <mkdir dir="${deb.data}/usr/share/mucommander"/>

    <!-- Copies the debian data files.                         -->
    <copy todir="${deb.data}/usr/share/mucommander" overwrite="true">
      <fileset file="${res}/mucommander.sh"/>
      <filterset>
        <filter token="ARGS" value=""/>
      </filterset>
    </copy>
    <copy todir="${deb.data}/usr/share/mucommander" overwrite="true">
      <fileset file="${res}/mucommander.sh"/>
      <fileset file="${res.license}"/>
      <fileset file="${res.readme}"/>
      <fileset file="${jar.cmp}"/>
    </copy>

    <!-- Generates the data.tar.gz file.                       -->
    <tar destfile="${deb.tmp}/data.tar.gz" compression="gzip">
      <tarfileset dir="${deb.data}">
        <include name="**"/>
        <exclude name="**/usr/share/mucommander/mucommander.sh"/>
      </tarfileset>
      <tarfileset dir="${deb.data}/" mode="755">
        <include name="**/usr/share/mucommander/mucommander.sh"/>
      </tarfileset>
    </tar>

    <!-- Computes the install size.                            -->
    <mksize name="deb.size">
      <fileset dir="${deb.data}"/>
    </mksize>

    <!-- Copies the debian control files.                      -->
    <copy todir="${deb.control}" overwrite="true">
      <fileset dir="${deb.dir}"/>
      <filterset>
        <filter token="VERSION" value="${deb.version}"/>
        <filter token="SIZE" value="${deb.size}"/>
      </filterset>
    </copy>

    <!-- Generates the debian package.                         -->
    <jdeb destfile="${dist}/${deb.name}" control="${deb.control}">
      <data src="${deb.tmp}/data.tar.gz"/>
    </jdeb>
  </target>

  <!-- Notifies users that we cannot generate the deb package. -->
  <target name="skip-deb" unless="jdeb.available">
    <echo>JDeb unavailable, skipping .deb generation</echo>
  </target>

  <!-- Generates the muCommander debian package.               -->
  <target name="deb" depends="load-jdeb,make-deb,skip-deb"/>



  <!-- = MAC OS X packages =================================== -->
  <!-- ======================================================= -->

  <target name="load-mkapp" depends="tools-jar">
    <taskdef name="mkapp" classname="com.mucommander.ant.macosx.AppTask" classpath="${tools.jar}"/>
  </target>

  <!-- Packages the Mac OS X .app file in a tar.gz.            -->
  <!-- Note that this is a temporary target which will         -->
  <!-- probably disapear when we get around to generating      -->
  <!-- our own .dmg files from Ant.                            -->
  <target name="app.tgz" depends="app,archive-prefix,package-prefix">
    <echo>Packaging Mac OS X distribution as ${dist}/${package-prefix}.app.tar.gz</echo>
    <tar destfile="${dist}/${package-prefix}.app.tar.gz" compression="gzip">
      <tarfileset dir="${app.folder}" prefix="${archive-prefix}/${app.name}">
        <include name="**"/>
        <exclude name="**/JavaApplicationStub"/>
      </tarfileset>
      <tarfileset dir="${app.folder}" prefix="${archive-prefix}/${app.name}" mode="755">
        <include name="**/JavaApplicationStub"/>
      </tarfileset>
      <tarfileset file="${res.license}" prefix="${archive-prefix}"/>
      <tarfileset file="${res.readme}"  prefix="${archive-prefix}"/>
    </tar>
  </target>

   <!-- Generates a Mac OS X .app distribution of muCommander. -->
   <!-- Output will be stored in ${app.folder}.                -->
  <target name="app" depends="load-mkapp,compress">
    <echo>Creating Mac OS X application in ${app.folder}</echo>
    <mkapp jar="${jar.cmp}" dest="${app.folder}" type="APPL" signature="MUCO" icon="${res}/icons/icon.icns"
         infoversion="0.9" classpath="/System/Library/Java">
      <string  name="CFBundleName"                    value="muCommander"/>
      <string  name="CFBundleVersion"                 value="${app.version}${app.subversion}"/>
      <boolean name="CFBundleAllowMixedLocalizations" value="true"/>
      <string  name="CFBundleDevelopmentRegion"       value="English"/>
      <string  name="CFBundleShortVersionString"      value="${app.version}${app.subversion}"/>
      <string  name="CFBundleGetInfoString"           value="muCommander ${app.version}${app.subversion}, (c) ${app.copyright} Maxence Bernard, ${url.homepage}"/>
      <string name="CFBundleInfoDictionaryVersion"   value="6.0"/>
      <dict name="Java">
        <string name="MainClass"  value="${main-class}"/>
        <string name="JVMVersion" value="${app.jvm}+"/>
        <dict name="Properties">
          <string name="com.apple.smallTabs"        value="true"/>
          <string name="com.apple.hwaccel"          value="true"/>
          <string name="apple.laf.useScreenMenuBar" value="true"/>
	  <string name="file.encoding" value="UTF-8"/>
        </dict>
      </dict>
    </mkapp>
  </target>

  <!-- Generates a Mac OS X dmg distribution of muCommander.   -->
  <!-- This target currently does nothing. We're hopeful that, -->
  <!-- someday, some good soul will have the courage to embark -->
  <!-- on the selfless endehavour of untangling the Mac OS X   -->
  <!-- .dmg format. Until then however, this will stay empty.  -->
  <target name="dmg" depends="compress">
  </target>



  <!-- = JNLP management ===================================== -->
  <!-- ======================================================= -->
  <!-- Checks whether the keystore password is available.      -->
  <!-- If it is, sets ${store.available} to true.      -->
  <target name="check-store">
    <condition property="store.available" value="true">
      <and>
        <isset property="store.pass"/>
        <not>
          <equals arg1="${store.pass}" arg2="" trim="true"/>
        </not>
      </and>
    </condition>
  </target>

  <!-- Signs the obfuscated jar file.                          -->
  <!-- Output will be stored in ${jar.signed}.                 -->
  <target name="sign" depends="check-store,compress" if="store.available">
    <echo>Signing obfuscated JAR file in ${jar.signed}</echo>
    <signjar jar="${jar.cmp}" signedjar="${jar.signed}" alias="maxence" keystore="${res}/keystore"
             storepass="${store.pass}"/>
  </target>

  <target name="load-jnlp" depends="tools-jar">
    <taskdef name="jnlp" classname="com.mucommander.ant.jnlp.JnlpTask" classpath="${tools.jar}"/>
  </target>


  <!-- Generates the Java webstart descriptor.                 -->
  <!-- Output will be stored in ${dist}/mucommander.jnlp.      -->
  <target name="jnlp" depends="load-jnlp">
    <!-- Prepares the necessary tasks and properties.          -->
    <echo>Creating JNLP file in ${dist}/${jnlp.file}</echo>
    <property name="url.jnlp" value="${url.jnlp.normal}"/>

    <!-- Generates the JNLP file.                              -->
    <jnlp out="${dist}/${jnlp.file}" spec="1.0+" version="${app.version}${app.subversion}" codebase="${url.jnlp}" href="${jnlp.file}" allpermissions="true">
      <information homepage="${url.homepage}" title="muCommander" vendor="Maxence Bernard" offline="true">
        <description>A cross-platform file manager.</description>
        <description kind="short">A cross-platform file manager.</description>
        <icon href="${jnlp.icon}" />
      </information>
      <resources os="Mac OS X">
        <property name="com.apple.smallTabs" value="true"/>
        <property name="com.apple.hwaccel" value="true"/>
        <property name="apple.laf.useScreenMenuBar" value="true"/>
        <property name="file.encoding" value="UTF-8"/>
      </resources>
      <resources>
        <j2se version="${app.jvm}+"/>
        <jar  href="mucommander.jar"/>
      </resources>
      <applicationdesc main="${main-class}"/>
    </jnlp>
  </target>



  <!-- = Source package ====================================== -->
  <!-- ======================================================= -->

  <!-- Generates a source release of muCommander.              -->
  <!-- Output will be stored in:                               -->
  <!-- ${dist}/${package-prefix}-src.tar.gz                    -->
  <target name="source" depends="clean,archive-prefix,package-prefix">
    <echo>Packaging source distribution as ${dist}/${package-prefix}-src.tar.gz</echo>

    <!-- Generates the TGZ file.                               -->
    <tar destfile="${dist}/${package-prefix}-src.tar.gz" compression="gzip">
      <tarfileset dir="." prefix="${archive-prefix}">
        <exclude name="${dist}/**"/>
        <exclude name="${tmp}/**"/>
        <exclude name="local.xml"/>
      </tarfileset>
    </tar>
  </target>


  <!-- = Documentation generation ============================ -->
  <!-- ======================================================= -->

  <!-- Generates a zip file with muCommander's API docs.       -->
  <!-- The output will be stored in ${doc.api-tgz}.            -->
  <target name="docs-tgz" depends="api-doc,tools-doc,archive-prefix">
    <echo>Packaging API documentation in ${doc.api-tgz}</echo>
    <mkdir dir="${dist}"/>
    <tar destfile="${doc.api-tgz}" compression="gzip">
      <tarfileset dir="${doc.api}" prefix="${archive-prefix}"/>
    </tar>

    <echo>Packaging tools API documentation in ${doc.tools-tgz}</echo>
    <tar destfile="${doc.tools-tgz}" compression="gzip">
      <tarfileset dir="${doc.tools}" prefix="${archive-prefix}"/>
    </tar>
  </target>

  <!-- Generates muCommander's API javadoc.                    -->
  <!-- Output is stored in ${doc.api}.                         -->
  <target name="api-doc" depends="constants">
    <echo>Creating API javadoc in ${doc.api}</echo>
    <mkdir dir="${doc.api}"/>
    <javadoc destdir="${doc.api}" author="true" windowtitle="muCommander API" encoding="UTF-8" access="package">
      <classpath>
         <fileset dir="${lib}">
          <include name="**/*.jar"/>
         </fileset>
      </classpath>
      <packageset dir="${source.src}">
        <include name="com/mucommander/**"/>
        <exclude name="com/mucommander/ant/**"/>
      </packageset>
      <packageset dir="${source.tmp}">
        <include name="com/mucommander/**"/>
      </packageset>
    </javadoc>
  </target>

  <!-- Generates muCommander's tools API javadoc.              -->
  <!-- Output is stored in ${doc.tools}.                       -->
  <target name="tools-doc">
    <echo>Creating tools API javadoc in ${doc.tools}</echo>
    <mkdir dir="${doc.tools}"/>
    <javadoc destdir="${doc.tools}" author="true" windowtitle="muTools API" encoding="UTF-8">
      <packageset dir="${source.src}">
        <include name="com/mucommander/ant/**"/>
      </packageset>
    </javadoc>
  </target>



  <!-- = Portable version generation ========================= -->
  <!-- ======================================================= -->

  <!-- Generates a Win32 executable file for the portable      -->
  <!-- version of muCommander.                                 -->
  <!-- This target will only be executed if launch4j is        -->
  <!-- found to be available.                                  -->
  <target name="portable-exe" depends="load-launch4j" if="launch4j.available">
    <echo>Creating Win32 portable executable in ${portable.exe}</echo>
    <mkdir dir="${portable.tmp}"/>
    <launch4j>
      <config outfile="${portable.exe}" jarpath="mucommander.jar" icon="${nsis.icon}" dontwrapjar="true" jarargs="-p .mucommander" chdir=".">
        <jre minversion="${app.jvm}.0"/>
      </config>
    </launch4j>
  </target>

  <!-- Generates a 'portable' distribution version of          -->
  <!-- muCommander.                                            -->
  <target name="portable" depends="compress,portable-exe,archive-prefix,package-prefix">
    <echo>Packaging portable distribution as ${dist}/${package-prefix}-portable.tar.gz</echo>

    <!-- Makes sure the muCommander startup scripts uses the   -->
    <!-- proper arguments.                                     -->
    <copy tofile="${portable.sh}" overwrite="true">
      <fileset file="${res}/mucommander.sh"/>
      <filterset>
        <filter token="ARGS" value="-p $0/../.mucommander"/>
      </filterset>
    </copy>

    <!-- Generates the TGZ file, keeping execution flags.      -->
    <tar destfile="${dist}/${package-prefix}-portable.tar.gz" compression="gzip">
      <tarfileset file="${portable.sh}"  prefix="${archive-prefix}" mode="755"/>
      <tarfileset file="${portable.exe}" prefix="${archive-prefix}"/>
      <tarfileset file="${res.license}"  prefix="${archive-prefix}"/>
      <tarfileset file="${res.readme}"   prefix="${archive-prefix}"/>
      <tarfileset file="${jar.cmp}"      prefix="${archive-prefix}"/>
    </tar>
  </target>



  <!-- = Unix tgz generation ================================= -->
  <!-- ======================================================= -->
  <!-- Generates a UNIX tar.gz distribution of muCommander.    -->
  <!-- Output will be stored in ${dist-tgz}.                   -->
  <target name="tgz" depends="compress,archive-prefix,package-prefix">
    <echo>Packaging Unix distribution as ${dist}/${package-prefix}.tar.gz</echo>

    <!-- Makes sure the muCommander startup script uses the    -->
    <!-- proper arguments.                                     -->
    <copy todir="${tmp}" overwrite="true">
      <fileset file="${res}/mucommander.sh"/>
      <filterset>
        <filter token="ARGS" value=""/>
      </filterset>
    </copy>

    <!-- Generates the TGZ file, keeping execution flags.      -->
    <tar destfile="${dist}/${package-prefix}.tar.gz" compression="gzip">
      <tarfileset file="${tmp}/mucommander.sh" prefix="${archive-prefix}" mode="755"/>
      <tarfileset file="${res.license}"        prefix="${archive-prefix}"/>
      <tarfileset file="${res.readme}"         prefix="${archive-prefix}"/>
      <tarfileset file="${jar.cmp}"            prefix="${archive-prefix}"/>
    </tar>
  </target>



  <!-- = version.xml generation ============================== -->
  <!-- ======================================================= -->

  <target name="load-muversion" depends="tools-jar">
    <taskdef name="muversion" classname="com.mucommander.ant.version.VersionTask" classpath="${tools.jar}"/>
  </target>

  <!-- Generates the muCommander's version.xml file.           -->
  <!-- Output will be stored in ${version-file}.               -->
  <target name="version" depends="load-muversion">
    <echo>Creating version file in ${version-file}</echo>
    <muversion version="${app.version}${app.subversion}" url="${url.app-download}" dest="${version-file}"/>
  </target>



  <!-- = Release targets ===================================== -->
  <!-- ======================================================= -->
  <!-- The following targets are used to generate the various  -->
  <!-- muCommander release files.                              -->

  <target name="set-release">
    <property name="is-release" value="true"/>
  </target>

  <!-- Sets this build as 'nightly'.                           -->
  <!-- The main difference between a nightly and a regular     -->
  <!-- build is the URL at which to download the latest        -->
  <!-- version information.                                    -->
  <target name="set-nightly" depends="set-release">
    <echo>Marking the build as 'nightly'</echo>
    <property name="version-url" value="${url.nightly-version}"/>
    <property name="is-nightly"  value="true"/>
    <property name="url.jnlp"    value="${url.jnlp.nightly}"/>
  </target>

  <!-- Generates builds of pretty much anything we could       -->
  <!-- think of.                                               -->
  <target name="release" depends="set-release,source,tgz,app.tgz,setup-exe,deb,portable,version,sign,jnlp,docs-tgz">
    <echo>All done.</echo>
  </target>

  <!-- Generates a nightly build of pretty much anything we    -->
  <!-- could think of.                                         -->
  <target name="nightly" depends="set-nightly,tgz,app.tgz,setup-exe,portable,deb,version,sign,jnlp">
    <echo>All done.</echo>
  </target>



  <!-- = Test targets ======================================== -->
  <!-- ======================================================= -->
  <!-- Launches muCommander in stress test mode, changing      -->
  <!-- current folder every second or so.                      -->
  <target name="stresstest" depends="compile,resources">
    <java classname="com.mucommander.StressTester" fork="true">
      <classpath>
        <pathelement location="${classes.normal}"/>
         <fileset dir="lib">
          <include name="**/*.jar"/>
         </fileset>
      </classpath>
    </java>
  </target>

  <!-- Makes sure all of the required icons are present.       -->
  <target name="testicons" depends="compile,resources">
    <java classname="com.mucommander.ui.icon.FileIcons" fork="true">
      <classpath>
        <pathelement location="${classes.normal}"/>
         <fileset dir="${lib}">
          <include name="**/*.jar"/>
         </fileset>
      </classpath>
    </java>
  </target>



  <!-- = Ant tools compilation =============================== -->
  <!-- ======================================================= -->
  <!-- Checks whether the tools jar file is up to date.        -->
  <!-- Output is stored in ${tools.up-to-date}.                -->
  <target name="check-tools" unless="tools.up-to-date">
    <uptodate property="tools.up-to-date" targetfile="${tools.jar}">
      <srcfiles dir="${source.src}/com/mucommander/ant" includes="**/*.java"/>
    </uptodate>
  </target>

  <!-- Compiles the tools soure code.                          -->
  <!-- Output will be stored in ${classes.tools}.              -->
  <!-- This task will only be executed if the tools JAR file   -->
  <!-- is not up too date.                                     -->
  <target name="tools-compile" depends="check-tools" unless="tools.up-to-date">
    <echo>Compiling tools in ${classes.tools}</echo>
    <mkdir dir="${classes.tools}"/>
    <javac destdir="${classes.tools}" debug="on" deprecation="on"
           encoding="utf-8" source="1.4" target="1.4">
      <src path="${source.src}/com/mucommander/ant"/>
      <src path="${source.src}/com/mucommander/xml"/>
      <src path="${source.src}/com/mucommander/res"/>
    </javac>
  </target>

  <!-- Generates the clear tools JAR file.                     -->
  <!-- Output will be stored in ${tools-jar}.                  -->
  <target name="tools-jar" depends="tools-compile" unless="tools.up-to-date">
    <mkdir dir="${dist}"/>
    <echo>Creating tools JAR file in ${tools.jar}</echo>
    <copy file="${res}/JavaApplicationStub" todir="${classes.tools}" overwrite="true"/>
    <jar destfile="${tools.jar}" basedir="${classes.tools}"/>
  </target>



  <!-- = Application lauching tasks ========================== -->
  <!-- ======================================================= -->
   <!-- Launches mucommander from the distribution JAR file.   -->
  <target name="runjar">
    <java jar="${jar.normal}" fork="true"/>
  </target>

   <!-- Compile and run project, default target.               -->
  <target name="compileandrun" depends="compile,run"/>

  <!-- Runs the application from unpackaged binaries.          -->
  <target name="run" depends="resources">
    <java classname="${main-class}" fork="true">
      <classpath>
        <pathelement location="${classes.normal}"/>
        <fileset dir="${lib}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </java>
  </target>
</project>
