<project name="mucommander" default="compileandrun" basedir=".">
  <!-- = Application constants =============================== -->
  <!-- ======================================================= -->
  <property name="app-version"   value="0.8 beta 3"/>
  <property name="app-copyright" value="2002-2006"/>


  <!-- = Project architecture ================================ -->
  <!-- ======================================================= -->
  <!-- The following properties define the directory structure -->
  <!-- of the muCommander project.                             -->

  <!-- Directory containing the project's sources.             -->
  <property name="source"     location="source"/>
  <!-- Where to store the application's release files.         -->
  <property name="dist"       location="dist"/>
  <!-- Directory containing all of the project's external      -->
  <!-- libraries.                                              -->
  <!-- Any jar file contained in that directory will be added  -->
  <!-- to the classpath at compile time, and bundled in the    -->
  <!-- application's final JAR file.                           -->
  <property name="lib"        location="lib"/>
  <!-- Directory containing the application's resources.       -->
  <property name="res"	      location="res"/>
  <!-- Directory containing the tools used to compile the      -->
  <!-- project.                                                -->
  <property name="tools"      location="tools"/>
  <!-- Path to the file in which to store the unobfuscated     -->
  <!-- application JAR file.                                   -->
  <property name="clear-jar"  location="${dist}/mucommander_unobf.jar"/>
  <!-- Path to the file in which to store the obfuscated       -->
  <!-- application JAR file.                                   -->
  <property name="obf-jar"    location="${dist}/mucommander.jar"/>
  <property name="tmp"        location="tmp"/>
  <property name="tmp-source" location="${tmp}/source"/>
  <!-- Where to store the application's binaries.              -->
  <property name="classes"    location="${tmp}/classes"/>


  <!-- Imports the system dependant definitions.               -->
  <import file="local.xml"/>



  <!-- = Maintenance tasks =================================== -->
  <!-- ======================================================= -->
  <!-- Tasks used for the maintenance of the project.          -->

  <!-- Prepares the project's compilations.                    -->
  <target name="init">
    <!-- Sets time stamp to current time/date -->
    <tstamp/>
    <!-- Create class directory used by compile -->
    <mkdir dir="${tmp}"/>
    <mkdir dir="${tmp-source}"/>
    <mkdir dir="${classes}"/>
    <!-- Copy images files to {$classes} -->
    <copy todir="${classes}">
      <fileset dir="res">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- Deletes any dynamically generated file, effectively     -->
  <!-- re-initialising the whole project.                      -->
  <target name="clean">
    <delete dir="${tmp-source}"/>
    <delete dir="${classes}"/>
    <delete dir="${tmp}"/>
    <delete dir="${dist}"/>
  </target>



  <!-- = Compilation tasks =================================== -->
  <!-- ======================================================= -->
  <!-- Turns debug output on in the resulting binary.          -->
  <target name="debug">
    <property name="is-debug" value="true"/>
  </target>

  <!-- Cleans and rebuilds the project from scratch.           -->
  <target name="rebuild" depends="clean,build"/>

  <!-- Creates all the files required for JAR generation in    -->
  <!-- ${classes}.                                             -->
  <target name="build" depends="includelibs,compile"/>

  <!-- Creates the runtime constant class.                     -->
  <target name="constants">
    <property name="is-debug" value="true"/>
    <taskdef name="javaw" classname="com.nrinaudo.java.JavaTask" classpath="${javatask}"/>
    <javaw name="${tmp-source}/com.mucommander.RuntimeConstants">
      <field name="DEBUG"                 value="${is-debug}"    type="boolean"/>
      <field name="MUCOMMANDER_VERSION"   value="${app-version}"/>
      <field name="MUCOMMANDER_COPYRIGHT" value="${app-copyright}"/>
    </javaw>

  </target>

  <!-- Compiles all java files found in ${source} and stores   -->
  <!-- the resulting bytecode in {$classes}.                   -->
  <target name="compile" depends="init,constants">
    <javac srcdir="${source}" destdir="${classes}" debug="on" deprecation="on"
           encoding="utf-8" source="1.3" target="1.3">
      <src path="${source}"/>
      <src path="${tmp-source}"/>
      <!-- Includes the application's libraries in the classpath. -->
      <classpath>
        <pathelement location="${classes}"/>
         <fileset dir="${lib}">
          <include name="**/*.jar"/>
         </fileset>
         <pathelement path="${classpath}"/>
      </classpath>
    </javac>
  </target>

  <!-- Includes the application's libraries with its binaries. -->
  <target name="includelibs" depends="init">
    <unjar dest="${classes}">
      <fileset dir="${lib}">
        <include name="**/*.jar"/>
	<!-- Exclude Apple MRJ skeletons, used only for compilation -->
	<exclude name="apple-mrj-skel.jar"/>
    </fileset>
    </unjar>
  </target> 

  <!-- Generates the application's unobfuscated jar file.      -->
  <target name="jar" depends="build">
    <mkdir  dir="${dist}"/>
    <delete file="${clear-jar}"/>
    <jar    jarfile="${clear-jar}"
            basedir="${classes}" manifest="${res}/MANIFEST.MF"/>
  </target>

  <target name="disable-debug">
    <property name="is-debug" value="false"/>
  </target>

  <!-- Generates the application's obfuscated jar file.        -->
  <target name="obfuscate" depends="disable-debug,clean,jar">
    <delete file="${obf-jar}"/>
    <taskdef name="proguard" classname="proguard.ant.ProGuardTask" classpath="${proguard}"/>
    <proguard overloadaggressively="on" usemixedcaseclassnames="off" ignorewarnings="on" printseeds="on" optimize="false">
      <injar name="${clear-jar}"/> 
      <outjar name="${obf-jar}"/>
      <libraryjar name="${java-lib}"/>
      <!-- Mac OS X specifics -->
      <keep name="com.mucommander.ui.macosx.FinderIntegration">
	<method access="public" name="handleAbout"/>
	<method access="public" name="handlePrefs"/>
	<method access="public" name="handleQuit"/>
      </keep>
      <!-- Viewer API uses reflection -->
      <keep name="com.mucommander.file.AbstractFile"/>
      <keepclasseswithmembers extends="com.mucommander.ui.viewer.FileViewer">
	<method access="public static" type="boolean" name="canViewFile" parameters="com.mucommander.file.AbstractFile"/> 
      </keepclasseswithmembers>
      <!-- Editor API uses reflection -->
      <keepclasseswithmembers extends="com.mucommander.ui.editor.FileEditor">
	<method access="public static" type="boolean" name="canEditFile" parameters="com.mucommander.file.AbstractFile"/>
      </keepclasseswithmembers>
      <!-- Main class -->
      <keep name="com.mucommander.Launcher">
	<method access="public static" type="void" name="main" parameters="java.lang.String[]"/>
      </keep>
      <!-- jCIFS uses forName -->
      <keep name="jcifs.Config">
	<method access="public" name="*"/>
      </keep>

      <!-- Required by j2ssh library -->
      <keep name="org.apache.commons.logging.*">
        <method access="public" name="*"/>
      </keep> 
      <keep name="org.apache.commons.logging.impl.LogFactoryImpl">
        <method access="public" name="*"/>
      </keep>
    </proguard>
  </target>



  <!-- = Test tasks ========================================== -->
  <!-- ======================================================= -->
  <!-- Launches muCommander in stress test mode, changing      -->
  <!-- current folder every second or so.                      -->
  <target name="stresstest">
    <java classname="com.mucommander.StressTester" fork="true">
      <classpath>
        <pathelement location="${classes}"/>
         <fileset dir="lib">
          <include name="**/*.jar"/>
         </fileset>
        <pathelement path="${classpath}"/>
      </classpath>
    </java>
  </target>

  <!-- Makes sure all of the required icons are present.       -->
  <target name="testicons">
    <java classname="com.mucommander.ui.icon.FileIcons" fork="true">
      <classpath>
        <pathelement location="${classes}"/>
         <fileset dir="${lib}">
          <include name="**/*.jar"/>
         </fileset>
        <pathelement path="${classpath}"/>
      </classpath>
    </java>
  </target>



  <!-- = Application lauching tasks ========================= -->
  <!-- ====================================================== -->
   <!-- Launches mucommander from the distribution JAR file.  -->
  <target name="runjar">
    <java jar="${clear-jar}" fork="true"/>
  </target>

   <!-- Compile and run project, default target.              -->
  <target name="compileandrun" depends="compile,run"/>

  <!-- Runs the application from unpackaged binaries.         -->
  <target name="run">
    <java classname="com.mucommander.Launcher" fork="true">
      <classpath>
        <pathelement location="${classes}"/>
        <fileset dir="${lib}">
          <include name="**/*.jar"/>
        </fileset>
        <pathelement path="${classpath}"/>
      </classpath>
    </java>
  </target>

</project>
