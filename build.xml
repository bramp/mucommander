<project name="mucommander" default="compileandrun" basedir=".">
  <!-- = Application constants =============================== -->
  <!-- ======================================================= -->
  <!-- The following properties define application specific    -->
  <!-- constants, such as the current version number.          -->

  <!-- Version number of the application.                      -->
  <property name="app-version"         value="0.8 beta3"/>
  <!-- Copyright line of the application.                      -->
  <property name="app-copyright"       value="2002-2006"/>



  <!-- = Application URLs ==================================== -->
  <!-- ======================================================= -->
  <!-- Various URLs used by the application.                   -->
  <!-- Idealy, those should never change, as it may cause      -->
  <!-- problems between different versions of muCommander.     -->

  <!-- Homepage of the application.                            -->
  <property name="homepage-url"        value="http://www.mucommander.com"/>
  <!-- URL at which to download the latest version data.       -->
  <property name="app-version-url"     value="${homepage-url}/version/version.xml"/>
  <!-- URL at which to download the latest nightly version     -->
  <!-- data.                                                   -->
  <property name="nightly-version-url" value="${homepage-url}/version/nightly.xml"/>
  <!-- URL to which users should be directed in order to       -->
  <!-- download the latest version of muCommander.             -->
  <property name="app-download-url"    value="${homepage-url}/#download"/>
  <!-- URL to which users should be directed in order to       -->
  <!-- browse the muCommander forums.                          -->
  <property name="forums-url"          value="${homepage-url}/forums/"/>
  <!-- URL to which users should be directed in the unlikely   -->
  <!-- event that they'd want to donate money to the project.  -->
  <property name="donation-url"        value="${homepage-url}/#donate"/>



  <!-- = Project architecture ================================ -->
  <!-- ======================================================= -->
  <!-- The following properties define the directory structure -->
  <!-- of the muCommander project.                             -->

  <!-- Directory containing the project's sources.             -->
  <property name="source"         location="source"/>
  <!-- Directory containing all of the project's external      -->
  <!-- libraries.                                              -->
  <!-- Any jar file contained in that directory will be added  -->
  <!-- to the classpath at compile time, and bundled in the    -->
  <!-- application's final JAR file.                           -->
  <property name="lib"            location="lib"/>

  <!-- Directory containing the application's resources.       -->
  <property name="res"	          location="res"/>
  <!-- Directory containing the application's images.          -->
  <property name="images"         location="${res}/images"/>

  <!-- Directory containing the tools used to compile the      -->
  <!-- project.                                                -->
  <property name="tools"          location="tools"/>
  <property name="tools-jar"      location="${tools}/mutasks.jar"/>

  <!-- Where to store the application's release files.         -->
  <property name="dist"           location="dist"/>
  <!-- Where to store the muCommander version file.            -->
  <property name="version-file"   location="${dist}/version.xml"/>
  <!-- Where to store the muCommander tar.gz unix release.     -->
  <property name="dist-tgz"       location="${dist}/mucommander.tar.gz"/>
  <!-- Where to store the muCommander app Mac OS X release.    -->
  <property name="app-name"       value="muCommander.app"/>
  <property name="app-folder"     location="${dist}/${app-name}"/>
  <!-- Path to the file in which to store the unobfuscated     -->
  <!-- application JAR file.                                   -->
  <property name="clear-jar"      location="${dist}/mucommander_unobf.jar"/>
  <!-- Path to the file in which to store the obfuscated       -->
  <!-- application JAR file.                                   -->
  <property name="obf-jar"        location="${dist}/mucommander.jar"/>
  <!-- Path to the file in which to store the obfuscated,      -->
  <!-- signed application JAR file.                            -->
  <property name="signed-jar"     location="${dist}/mucommander_signed.jar"/>
  <!-- Path toe the file in which to store the application's   -->
  <!-- API documentation as a zip file.                        -->
  <property name="api-zip"        location="${dist}/mucommander-api.zip"/>
  <!-- Path to the file in which to store the tools'          -->
  <!-- API documentation as a zip file.                        -->
  <property name="tools-api-zip"  location="${dist}/mucommander-tools-api.zip"/>
  <property name="app-tgz"        location="${dist}/mucommander.app.tar.gz"/>

  <!-- Where to store temporary files.                         -->
  <property name="tmp"            location="tmp"/>
  <!-- Where to write temporary Java sources.                  -->
  <property name="tmp-source"     location="${tmp}/source"/>
  <!-- Where to store the application's binaries.              -->
  <property name="classes"        location="${tmp}/classes"/>
  <!-- Where to store the tools binaries.                      -->
  <property name="tool-classes"   location="${tmp}/tools"/>

  <!-- Where to generate muCommander documentation.            -->
  <property name="docs"           location="docs"/>
  <!-- Where to generate the muCommander API javadoc.          -->
  <property name="api-docs"       location="${docs}/api"/>
  <!-- Where to generate the muCommander tools API javadoc.    -->
  <property name="tools-docs"     location="${docs}/tools"/>

  <!-- Application's main class.                               -->
  <property name="main-class"     value="com.mucommander.Launcher"/>

  <!-- Imports the system dependant definitions.               -->
  <import file="local.xml"/>



  <!-- = Maintenance targets ================================= -->
  <!-- ======================================================= -->
  <!-- Tasks used for the maintenance of the project.          -->

  <!-- Prepares the project's compilations.                    -->
  <!-- This will create compilation folders in ${tmp}.         -->
  <target name="init">
    <echo>Creating compilation directories...</echo>
    <!-- Sets time stamp to current time/date -->
    <tstamp/>
    <!-- Create class directory used by compile -->
    <mkdir dir="${tmp}"/>
    <mkdir dir="${tmp-source}"/>
    <mkdir dir="${classes}"/>
    <mkdir dir="${tool-classes}"/>
  </target>

  <!-- Copies the project's resources.                         -->
  <!-- All resources will be copied in ${classes}.             -->
  <target name="resources">
    <echo>Copying resources...</echo>
    <copy todir="${classes}">
      <fileset dir="${images}">
        <include name="**/*"/>
      </fileset>
    </copy>
    <copy file="${res}/dictionary.txt" todir="${classes}"/>
    <copy file="${res}/mime.types" todir="${classes}"/>
  </target>

  <!-- Deletes any dynamically generated file, effectively     -->
  <!-- re-initialising the whole project.                      -->
  <target name="clean">
    <echo>Deleting temporary files...</echo>
    <delete dir="${tmp-source}"/>
    <delete dir="${classes}"/>
    <delete dir="${tool-classes}"/>
    <delete dir="${tmp}"/>
    <delete dir="${dist}"/>
    <delete dir="${api-docs}"/>
    <delete dir="${docs}"/>
    <echo>Deleting emacs backup files...</echo>
    <delete includeEmptyDirs="true">
      <fileset dir="." includes="**/*~" defaultexcludes="no"/>
    </delete>
  </target>



  <!-- = Helper targets ====================================== -->
  <!-- ======================================================= -->

  <!-- Disables debug instructions in the generated binaries.  -->
  <target name="disable-debug">
    <echo>Disabling debug...</echo>
    <property name="is-debug" value="false"/>
  </target>

  <!-- Generates the prefix folder for all archives.           -->
  <!-- Output will be stored in property ${archive-prefix}.    -->
  <target name="archive-prefix">
    <echo>Generating archive prefix...</echo>
    <!-- Escapes the version number for the TGZ prefix.        -->
    <taskdef name="strreplace" classname="com.mucommander.ant.util.ReplaceTask" classpath="${tools-jar}"/>
    <strreplace from="mucommander-${app-version}" to="archive-prefix" what="[ .]" with="_"/>
  </target>

  <!-- Sets this build as 'nightly'.                           -->
  <!-- The main difference between a nightly and a regular     -->
  <!-- build is the URL at which to download the latest        -->
  <!-- version information.                                    -->
  <target name="set-nightly">
    <echo>Marking the build as 'nightly'...</echo>
    <property name="version-url" value="${nightly-version-url}"/>
  </target>

  <!-- Turns debug output on in the resulting binary.          -->
  <!-- This will make the JAR file noticeably larger, and thus -->
  <!-- should never be called for 'official' releases.         -->
  <target name="debug">
    <echo>Enabling debug...</echo>
    <property name="is-debug" value="true"/>
  </target>

  <!-- Includes the application's libraries with its binaries. -->
  <!-- All libraries will be unpacked in ${classes}.           -->
  <target name="includelibs">
    <echo>Unpacking libraries in ${classes}...</echo>
    <unjar dest="${classes}">
      <fileset dir="${lib}">
        <include name="**/*.jar"/>
        <!-- Exclude Apple API stubs, used only at compile time -->
        <exclude name="osx-mrj-stubs.jar"/>
        <exclude name="osx-eawt-stubs.jar"/>
    </fileset>
    </unjar>

    <!-- Makes sure that muCommander's JAR file does not        -->
    <!-- inherit license and copyright from libraries.          -->
    <delete dir="${classes}/META-INF"/>
  </target> 



  <!-- = Compilation targets ================================== -->
  <!-- ======================================================== -->
  <!-- The following targets are used to generate the various   -->
  <!-- muCommander JAR files.                                   -->

  <!-- Creates the runtime constant class.                      -->
  <!-- Output will be stored in ${tmp-source}.                  -->
  <target name="constants">
    <echo>Creating ${tmp-source}/com.mucommander.RuntimeConstants...</echo>
    <property name="is-debug"    value="true"/>
    <property name="version-url" value="${app-version-url}"/>
    <taskdef name="date" classname="com.mucommander.ant.util.DateTask" classpath="${tools-jar}"/>
    <date name="release-date"/>
    <taskdef name="javaw" classname="com.mucommander.ant.java.JavaTask" classpath="${tools-jar}"/>
    <javaw name="${tmp-source}/com.mucommander.RuntimeConstants">
      <field name="DEBUG"        value="${is-debug}"    type="boolean"/>
      <field name="VERSION"      value="${app-version}"/>
      <field name="COPYRIGHT"    value="${app-copyright}"/>
      <field name="APP_STRING"   value="muCommander v${app-version}"/>
      <field name="VERSION_URL"  value="${version-url}"/>
      <field name="RELEASE_DATE" value="${release-date}" type="String"/>
      <field name="HOMEPAGE_URL" value="${homepage-url}"/>
      <field name="FORUMS_URL"   value="${forums-url}"/>
      <field name="DONATION_URL" value="${donation-url}"/>
    </javaw>
  </target>

  <!-- Compiles all java files found in ${source} and stores   -->
  <!-- the resulting bytecode in {$classes}.                   -->
  <target name="compile" depends="init,constants">
    <echo>Compiling sources into ${classes}...</echo>
    <javac destdir="${classes}" debug="on" deprecation="on"
           encoding="utf-8" source="1.3" target="1.3">
      <src path="${source}"/>
      <src path="${tmp-source}"/>
      <!-- Includes the application's libraries in the classpath. -->
      <classpath>
         <fileset dir="${lib}">
          <include name="**/*.jar"/>
         </fileset>
      </classpath>
    </javac>
  </target>

  <!-- Generates the application's unobfuscated jar file.      -->
  <!-- Output will be stored in {$clear-jar}.                  -->
  <target name="jar" depends="compile,resources,includelibs">
    <echo>Creating unobfuscated JAR file in ${clear-jar}...</echo>
    <mkdir dir="${dist}"/>
    <jar jarfile="${clear-jar}" basedir="${classes}">
      <manifest>
        <attribute name="Main-Class" value="${main-class}"/>
      </manifest>
    </jar>
  </target>

  <!-- Generates the application's obfuscated jar file.        -->
  <!-- Output will be stored in ${obf-jar}.                    -->
  <target name="obfuscate" depends="disable-debug,clean,jar">
    <echo>Creating obfuscated JAR file in ${obf-jar}...</echo>
    <taskdef name="proguard" classname="proguard.ant.ProGuardTask" classpath="${proguard}"/>
    <proguard overloadaggressively="on" usemixedcaseclassnames="off" ignorewarnings="on" printseeds="on" optimize="true"
              printusage="${tmp}/obf-usage.txt">
      <injar name="${clear-jar}"/> 
      <outjar name="${obf-jar}"/>
      <libraryjar name="${java-lib}"/>
      <libraryjar name="${lib}"/>
      <libraryjar name="${ant-lib}"/>
      <!-- Mac OS X specifics -->
      <keep name="com.mucommander.ui.macosx.EAWTHandler">
        <method access="public"/>
      </keep>
      <keep name="com.mucommander.ui.macosx.MRJHandler">
        <method access="public"/>
      </keep>
      <!-- Viewer API uses reflection -->
      <keep name="com.mucommander.file.AbstractFile"/>
      <keepclasseswithmembers extends="com.mucommander.ui.viewer.FileViewer">
	<method access="public static" type="boolean" name="canViewFile" parameters="com.mucommander.file.AbstractFile"/> 
      </keepclasseswithmembers>
      <!-- Editor API uses reflection -->
      <keepclasseswithmembers extends="com.mucommander.ui.editor.FileEditor">
	<method access="public static" type="boolean" name="canEditFile" parameters="com.mucommander.file.AbstractFile"/>
      </keepclasseswithmembers>
      <!-- Main class -->
      <keep name="${main-class}">
	<method access="public static" type="void" name="main" parameters="java.lang.String[]"/>
      </keep>
      <!-- jCIFS uses forName -->
      <keep name="jcifs.Config">
	<method access="public" name="*"/>
      </keep>

      <!-- Required by j2ssh library -->
      <keep name="org.apache.commons.logging.*">
        <method access="public" name="*"/>
      </keep> 
      <keep name="org.apache.commons.logging.impl.LogFactoryImpl">
        <method access="public" name="*"/>
      </keep>
    </proguard>
  </target>



  <!-- = Test targets ======================================== -->
  <!-- ======================================================= -->
  <!-- Launches muCommander in stress test mode, changing      -->
  <!-- current folder every second or so.                      -->
  <target name="stresstest">
    <java classname="com.mucommander.StressTester" fork="true">
      <classpath>
        <pathelement location="${classes}"/>
         <fileset dir="lib">
          <include name="**/*.jar"/>
         </fileset>
      </classpath>
    </java>
  </target>

  <!-- Makes sure all of the required icons are present.       -->
  <target name="testicons">
    <java classname="com.mucommander.ui.icon.FileIcons" fork="true">
      <classpath>
        <pathelement location="${classes}"/>
         <fileset dir="${lib}">
          <include name="**/*.jar"/>
         </fileset>
      </classpath>
    </java>
  </target>



  <!-- = Ant tools compilation ============================== -->
  <!-- ====================================================== -->
  <!-- Compiles the tools soure code.                         -->
  <!-- Output will be stored in ${tool-classes}.              -->
  <target name="tools-compile" depends="init">
    <echo>Compiling tools in ${tool-classes}...</echo>
    <javac destdir="${tool-classes}" debug="on" deprecation="on"
           encoding="utf-8" source="1.3" target="1.3">
      <src path="${source}/com/mucommander/ant"/>
      <src path="${source}/com/mucommander/xml"/>
    </javac>
  </target>

  <!-- Generates the clear tools JAR file.                    -->
  <!-- Output will be stored in ${toola-jar}.                 -->
  <target name="tools-jar" depends="clean,tools-compile">
    <echo>Creating tools JAR file in ${tools-jar}...</echo>
    <copy file="${res}/JavaApplicationStub" todir="${tool-classes}"/>
    <jar destfile="${tools-jar}" basedir="${tool-classes}"/>
  </target>



  <!-- = Application lauching tasks ========================= -->
  <!-- ====================================================== -->
   <!-- Launches mucommander from the distribution JAR file.  -->
  <target name="runjar">
    <java jar="${clear-jar}" fork="true"/>
  </target>

   <!-- Compile and run project, default target.              -->
  <target name="compileandrun" depends="compile,run"/>

  <!-- Runs the application from unpackaged binaries.         -->
  <target name="run" depends="resources">
    <java classname="${main-class}" fork="true">
      <classpath>
        <pathelement location="${classes}"/>
        <fileset dir="${lib}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </java>
  </target>



  <!-- = Documentation targets =============================== -->
  <!-- ======================================================= -->
  <!-- The following targets are used to generate              -->
  <!-- muCommander's documentation. At the moment, we only     -->
  <!-- with the API javadoc, but will (probably) get around to -->
  <!-- document anything else we can think of.                 -->

  <!-- Generates muCommander's API javadoc.                    -->
  <!-- Output is stored in ${api-docs}.                        -->
  <target name="api-doc" depends="constants">
    <echo>Generating API javadoc in ${api-docs}...</echo>
    <mkdir dir="${api-docs}"/>
    <javadoc destdir="${api-docs}" author="true" windowtitle="muCommander API" encoding="UTF-8">
      <classpath>
         <fileset dir="${lib}">
          <include name="**/*.jar"/>
         </fileset>
      </classpath>
      <packageset dir="${source}">
        <include name="com/mucommander/**"/>
        <exclude name="com/mucommander/ant/**"/>
      </packageset>
      <packageset dir="${tmp-source}">
        <include name="com/mucommander/**"/>
      </packageset>
    </javadoc>
  </target>

  <!-- Generates muCommander's tools API javadoc.              -->
  <!-- Output is stored in ${tools-docs}.                      -->
  <target name="tools-doc">
    <echo>Generating tools API javadoc in ${tools-docs}...</echo>
    <mkdir dir="${tools-docs}"/>
    <javadoc destdir="${tools-docs}" author="true" windowtitle="muTools API" encoding="UTF-8">
      <packageset dir="${source}">
        <include name="com/mucommander/ant/**"/>
      </packageset>
    </javadoc>
  </target>



  <!-- = Release targets ===================================== -->
  <!-- ======================================================= -->
  <!-- The following targets are used to generate the various  -->
  <!-- muCommander release files.                              -->

  <!-- Generates a nightly build of pretty much anything we    -->
  <!-- could think of. While this target can be fairly useful, -->
  <!-- it has the disadvantage of only being useable by        -->
  <!-- Maxence (see target 'sign' for more information).       -->
  <target name="nightly" depends="set-nightly,tools-jar,tgz,app-tgz,version,docs-zip,sign">
    <echo>All done.</echo>
  </target>

  <!-- Generates a zip file with muCommander's API docs.       -->
  <!-- The output will be stored in ${api-zip}.                -->
  <target name="docs-zip" depends="api-doc,tools-doc,archive-prefix">
    <echo>Packaging API documentation in ${api-zip}...</echo>
    <mkdir dir="${dist}"/>
    <zip destfile="${api-zip}">
      <zipfileset dir="${api-docs}" prefix="${archive-prefix}"/>
    </zip>

    <echo>Packaging tools API documentation in ${tools-api-zip}...</echo>
    <zip destfile="${tools-api-zip}">
      <zipfileset dir="${tools-docs}" prefix="${archive-prefix}"/>
    </zip>
  </target>

  <!-- Generates a UNIX tar.gz distribution of muCommander.    -->
  <!-- Output will be stored in ${dist-tgz}.                   -->
  <target name="tgz" depends="obfuscate,archive-prefix">
    <echo>Packaging Unix distribution as ${dist-tgz}...</echo>

    <!-- Generates the TGZ file, keeping execution flags.      -->
    <tar destfile="${dist-tgz}" compression="gzip">
      <tarfileset file="${res}/mucommander.sh" prefix="${archive-prefix}" mode="755"/>
      <tarfileset file="license.txt"           prefix="${archive-prefix}"/>
      <tarfileset file="readme.txt"            prefix="${archive-prefix}"/>
      <tarfileset file="${obf-jar}"            prefix="${archive-prefix}"/>
    </tar>
  </target>

  <!-- Packages the Mac OS X .app file in a tar.gz.            -->
  <!-- Note that this is a temporary target which will         -->
  <!-- probably disapear when we get around to generating      -->
  <!-- our own .dmg files from Ant.                            -->
  <target name="app-tgz" depends="app,archive-prefix">
    <echo>Packaging Mac OS X distribution as ${app-tgz}...</echo>
    <tar destfile="${app-tgz}" compression="gzip">
      <tarfileset dir="${app-folder}" prefix="${archive-prefix}/${app-name}">
        <include name="**"/>
        <exclude name="**/JavaApplicationStub"/>
      </tarfileset>
      <tarfileset dir="${app-folder}" prefix="${archive-prefix}/${app-name}" mode="755">
        <include name="**/JavaApplicationStub"/>
      </tarfileset>
      <tarfileset file="license.txt" prefix="${archive-prefix}"/>
      <tarfileset file="readme.txt" prefix="${archive-prefix}"/>
    </tar>
  </target>

   <!-- Generates a Mac OS X .app distribution of muCommander. -->
   <!-- Output will be stored in ${app-folder}.                -->
  <target name="app" depends="obfuscate">
    <echo>Creating Mac OS X application in ${app-folder}...</echo>
    <taskdef name="app" classname="com.mucommander.ant.macosx.AppTask" classpath="${tools-jar}"/>
    <app jar="${obf-jar}" dest="${app-folder}" type="APPL" signature="MUCO" icon="${res}/icons/icon.icns"
         infoversion="0.9">
      <string  name="CFBundleName"                    value="muCommander"/>
      <string  name="CFBundleVersion"                 value="${app-version}"/>
      <boolean name="CFBundleAllowMixedLocalizations" value="true"/>
      <string  name="CFBundleDevelopmentRegion"       value="English"/>
      <string  name="CFBundleShortVersionString"      value="${app-version}"/>
      <string  name="CFBundleGetInfoString"           value="muCommander ${app-version}, (c) ${app-copyright} Maxence Bernard, ${homepage-url}"/>
      <string name="CFBundleInfoDictionaryVersion"   value="6.0"/>
      <dict name="Java">
        <string name="MainClass"  value="${main-class}"/>
        <string name="JVMVersion" value="1.4*"/>
        <dict name="Properties">
          <string name="com.apple.smallTabs"        value="true"/>
          <string name="com.apple.hwaccel"          value="true"/>
          <string name="apple.laf.useScreenMenuBar" value="true"/>
	  <string name="file.encoding" value="UTF-8"/>
        </dict>
      </dict>
    </app>
  </target>

  <!-- Generates a Mac OS X dmg distribution of muCommander.   -->
  <!-- This target currently does nothing. We're hopeful that, -->
  <!-- someday, some good soul will have the courage to embark -->
  <!-- the selfless endehavour of untangling the Mac OS X .dmg -->
  <!-- format. Until then however, this will stay empty.       -->
  <target name="dmg" depends="obfuscate">
  </target>

  <!-- Generates the muCommander's version.xml file.           -->
  <!-- Output will be stored in ${version-file}.               -->
  <target name="version">
    <echo>Generating version file in ${version-file}...</echo>
    <taskdef name="muversion" classname="com.mucommander.ant.version.VersionTask" classpath="${tools-jar}"/>
    <muversion version="${app-version}" url="${app-download-url}" dest="${version-file}"/>
  </target>

  <!-- Signs the obfuscated jar file.                         -->
  <!-- Output will be stored in ${signed-jar}.                -->
  <target name="sign" depends="obfuscate">
    <echo>Signing obfuscated JAR file in ${signed-jar}...</echo>
    <signjar jar="${obf-jar}" signedjar="${signed-jar}" alias="maxence" keystore="${res}/keystore"
             storepass="${store-pass}"/>
  </target>
</project>
