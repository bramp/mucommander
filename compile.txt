               --------------------------------------------
                   muCommander compilation instructions
               --------------------------------------------

1. Configuration

  The first step to compiling muCommander is making sure all the proper
libraries and tools are installed.

  Pre-requesites are:
- JDK 1.6 or greater
  Event though muCommander runs on Java 1.4 or later, it takes advantage of
  the 1.6 API and needs it in order to compile.
  This can be retrieved from http://java.sun.com/

- Ant 1.6.5 or greater
  This can be retrieved from http://ant.apache.org/


  Once these tools have been installed, the muCommander build process needs to
be configured. This is done by copying the local_template.xml file found at the
root of the project to local.xml and editing it.

  The values that need to be set are:
- java.lib (required)
  Path to the Java 1.6's classes JAR.
  This is usually found in /path/to/jre/lib/rt.jar
  Apple, however, decided to use non-standard paths for reasons of their own.
  You'll find the classes JAR file in:
  /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Classes/classes.jar

- ant.lib (required)
  Path to the Ant JAR file.
  This is necessary in order to compile the various Ant tasks used by
  muCommander.

- proguard.lib (defaults to ./tools/proguard.jar)
  Path to the ProGuard JAR file.
  The one used by muCommander can be found in ./tools/proguard.jar, but you can
  modify that if you wish to try out other versions.

- 7za.executable (non-required)
  Path to the 7za executable.
  This is used to compress muCommander's JAR file better than Java's ZIP
  implementation.
  If this property is not set, standard WIP compression will be used.

- antdoclet.lib (defaults to ./tools/antdoclet.jar)
  Path to the AntDoclet JAR file.
  This is used to generate the Ant tools documentation.
  The one used by muCommander can be found in ./tools/antdoclet.jar, but you can
  modify that if you wish to try out other versions.

- velocity.lib (defaults to ./tools/velocity.jar)
  Path to the Velocity JAR file.
  This is used to generate the Ant tools documentation.
  The one used by muCommander can be found in ./tools/velocity.jar, but you can
  modify that if you wish to try out other versions.

- store.path (non-required)
  Password of the keystore file used to generate a signed muCommander JAR file.
  If this property is not set, you won't be able to generate signed JAR files.
  If you're not Maxence, you can safely ignore this property.

- jdeb.lib (defaults to ./tools/jdeb.jar)
  Path to the JDeb JAR file.
  This is used to generate the muCommander Debian package.
  The one used by muCommander can be found in ./tools/jdeb.jar, but you can
  modify that if you wish to try out other versions.

- nsis.executable (non-required)
  Path to the NSIS executable.
  This is used to generate a muCommander Win32 native setup.
  If this property is not set, you won't be able to generate Win32 setups.

- launch4j.dir (non-required)
  Path to the Launch4J installation directory.
  This is used to generate a muCommander Win32 executable.
  If this property is not set, you won't be able to generate Win32 or portable
  releases.



2. Compiling muCommander

  There are various ways of compiling muCommander. The most common ways are:
- ant. This will compile all the modified Java files, store the binaries in
  /path/to/mucommander/tmp/classes, and run the resulting application.
- ant jar. This will compile all the modified Java files and store the binaries
  in /path/to/mucommander/dist/mucommander_unobf.jar.
  This jar file is meant for debug, and running it will output a fair amount
  of tracing information.
- ant obfuscate. This will compile and obfuscate all the Java files and store
  the binaries in /path/to/mucommander/dist/mucommander_obf.jar. The resulting
  jar file will not contain debug code anymore.
- ant compress. This is identical to ant obfuscate, but will compress the jar file
  even more and store it in /path/to/mucommander/dist/mucommander.jar. This is the
  file we use for release.
